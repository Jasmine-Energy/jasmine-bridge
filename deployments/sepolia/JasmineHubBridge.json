{
  "address": "0xb033466330F6E83b34fB37641aCdC9BC185E6D57",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "AdapterExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorCreatingContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorCreatingProxy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TargetAlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "OFTAdapterCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "adapters",
      "outputs": [
        {
          "internalType": "address",
          "name": "oftAdapter",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        }
      ],
      "name": "allowInitializePath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "createAdapter",
      "outputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isComposeMsgSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "predictAdapterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setAdapterPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1920ddbaa49c2e6ce6bf8950f69e3e1afe7aa183a552210b68749d00ee872fe9",
  "receipt": {
    "to": null,
    "from": "0x0B98574958b84F1E2F8FF48cCb07A3c8d4211804",
    "contractAddress": "0xb033466330F6E83b34fB37641aCdC9BC185E6D57",
    "transactionIndex": 41,
    "gasUsed": "3325475",
    "logsBloom": "0x
    "blockHash": "0x4c869466a890dec8b0dd67e9bed0f982ee76d0ca03265a379a7752f889f2613c",
    "transactionHash": "0x1920ddbaa49c2e6ce6bf8950f69e3e1afe7aa183a552210b68749d00ee872fe9",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 5811163,
        "transactionHash": "0x1920ddbaa49c2e6ce6bf8950f69e3e1afe7aa183a552210b68749d00ee872fe9",
        "address": "0xb033466330F6E83b34fB37641aCdC9BC185E6D57",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d4447f8119a025004b720be6264ebbafd7220258"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0x4c869466a890dec8b0dd67e9bed0f982ee76d0ca03265a379a7752f889f2613c"
      },
      {
        "transactionIndex": 41,
        "blockNumber": 5811163,
        "transactionHash": "0x1920ddbaa49c2e6ce6bf8950f69e3e1afe7aa183a552210b68749d00ee872fe9",
        "address": "0x6EDCE65403992e310A62460808c4b910D972f10f",
        "topics": [
          "0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981"
        ],
        "data": "0x000000000000000000000000b033466330f6e83b34fb37641acdc9bc185e6d57000000000000000000000000d4447f8119a025004b720be6264ebbafd7220258",
        "logIndex": 75,
        "blockHash": "0x4c869466a890dec8b0dd67e9bed0f982ee76d0ca03265a379a7752f889f2613c"
      }
    ],
    "blockNumber": 5811163,
    "cumulativeGasUsed": "9156259",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6EDCE65403992e310A62460808c4b910D972f10f",
    "0xD4447f8119A025004b720Be6264EbBAFd7220258"
  ],
  "numDeployments": 1,
  "solcInputHash": "418fcaafcd13277ae656b703b261110a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"AdapterExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorCreatingContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorCreatingProxy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"OFTAdapterCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oftAdapter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"createAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"predictAdapterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setAdapterPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"OFTAdapterCreated(address,address)\":{\"notice\":\"TODO: docs\"}},\"kind\":\"user\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JasmineHubBridge.sol\":\"JasmineHubBridge\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@0xsequence/create3/contracts/Create3.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n/**\\n  @title A library for deploying contracts EIP-3171 style.\\n  @author Agustin Aguilar <aa@horizon.io>\\n*/\\nlibrary Create3 {\\n  error ErrorCreatingProxy();\\n  error ErrorCreatingContract();\\n  error TargetAlreadyExists();\\n\\n  /**\\n    @notice The bytecode for a contract that proxies the creation of another contract\\n    @dev If this code is deployed using CREATE2 it can be used to decouple `creationCode` from the child contract address\\n\\n  0x67363d3d37363d34f03d5260086018f3:\\n      0x00  0x67  0x67XXXXXXXXXXXXXXXX  PUSH8 bytecode  0x363d3d37363d34f0\\n      0x01  0x3d  0x3d                  RETURNDATASIZE  0 0x363d3d37363d34f0\\n      0x02  0x52  0x52                  MSTORE\\n      0x03  0x60  0x6008                PUSH1 08        8\\n      0x04  0x60  0x6018                PUSH1 18        24 8\\n      0x05  0xf3  0xf3                  RETURN\\n\\n  0x363d3d37363d34f0:\\n      0x00  0x36  0x36                  CALLDATASIZE    cds\\n      0x01  0x3d  0x3d                  RETURNDATASIZE  0 cds\\n      0x02  0x3d  0x3d                  RETURNDATASIZE  0 0 cds\\n      0x03  0x37  0x37                  CALLDATACOPY\\n      0x04  0x36  0x36                  CALLDATASIZE    cds\\n      0x05  0x3d  0x3d                  RETURNDATASIZE  0 cds\\n      0x06  0x34  0x34                  CALLVALUE       val 0 cds\\n      0x07  0xf0  0xf0                  CREATE          addr\\n  */\\n  \\n  bytes internal constant PROXY_CHILD_BYTECODE = hex\\\"67_36_3d_3d_37_36_3d_34_f0_3d_52_60_08_60_18_f3\\\";\\n\\n  //                        KECCAK256_PROXY_CHILD_BYTECODE = keccak256(PROXY_CHILD_BYTECODE);\\n  bytes32 internal constant KECCAK256_PROXY_CHILD_BYTECODE = 0x21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f;\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Creates a new contract with given `_creationCode` and `_salt`\\n    @param _salt Salt of the contract creation, resulting address will be derivated from this value only\\n    @param _creationCode Creation code (constructor) of the contract to be deployed, this value doesn't affect the resulting address\\n    @return addr of the deployed contract, reverts on error\\n  */\\n  function create3(bytes32 _salt, bytes memory _creationCode) internal returns (address addr) {\\n    return create3(_salt, _creationCode, 0);\\n  }\\n\\n  /**\\n    @notice Creates a new contract with given `_creationCode` and `_salt`\\n    @param _salt Salt of the contract creation, resulting address will be derivated from this value only\\n    @param _creationCode Creation code (constructor) of the contract to be deployed, this value doesn't affect the resulting address\\n    @param _value In WEI of ETH to be forwarded to child contract\\n    @return addr of the deployed contract, reverts on error\\n  */\\n  function create3(bytes32 _salt, bytes memory _creationCode, uint256 _value) internal returns (address addr) {\\n    // Creation code\\n    bytes memory creationCode = PROXY_CHILD_BYTECODE;\\n\\n    // Get target final address\\n    addr = addressOf(_salt);\\n    if (codeSize(addr) != 0) revert TargetAlreadyExists();\\n\\n    // Create CREATE2 proxy\\n    address proxy; assembly { proxy := create2(0, add(creationCode, 32), mload(creationCode), _salt)}\\n    if (proxy == address(0)) revert ErrorCreatingProxy();\\n\\n    // Call proxy with final init code\\n    (bool success,) = proxy.call{ value: _value }(_creationCode);\\n    if (!success || codeSize(addr) == 0) revert ErrorCreatingContract();\\n  }\\n\\n  /**\\n    @notice Computes the resulting address of a contract deployed using address(this) and the given `_salt`\\n    @param _salt Salt of the contract creation, resulting address will be derivated from this value only\\n    @return addr of the deployed contract, reverts on error\\n\\n    @dev The address creation formula is: keccak256(rlp([keccak256(0xff ++ address(this) ++ _salt ++ keccak256(childBytecode))[12:], 0x01]))\\n  */\\n  function addressOf(bytes32 _salt) internal view returns (address) {\\n    address proxy = address(\\n      uint160(\\n        uint256(\\n          keccak256(\\n            abi.encodePacked(\\n              hex'ff',\\n              address(this),\\n              _salt,\\n              KECCAK256_PROXY_CHILD_BYTECODE\\n            )\\n          )\\n        )\\n      )\\n    );\\n\\n    return address(\\n      uint160(\\n        uint256(\\n          keccak256(\\n            abi.encodePacked(\\n              hex\\\"d6_94\\\",\\n              proxy,\\n              hex\\\"01\\\"\\n            )\\n          )\\n        )\\n      )\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xf81ebf689cee91714da6194b018ff8ac481a6d99113e5ee5fa416df7e40927f9\",\"license\":\"Unlicense\"},\"@jasmine-energy/pools-contracts/contracts/interfaces/errors/JasmineErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title Jasmine Errors\\n * @author Kai Aldag<kai.aldag@jasmine.energy>\\n * @notice Convenience interface for errors omitted by Jasmine's smart contracts\\n * @custom:security-contact dev@jasmine.energy\\n */\\ninterface JasmineErrors {\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  General Errors  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\\\\\\\\\n\\n    /// @dev Emitted if input is invalid\\n    error InvalidInput();\\n\\n    /// @dev Emitted if internal validation failed\\n    error ValidationFailed();\\n\\n    /// @dev Emitted if function is disabled\\n    error Disabled();\\n\\n    /// @dev Emitted if contract does not support metadata version\\n    error UnsupportedMetadataVersion(uint8 metadataVersion);\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  Access Control Errors  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\\\\\\\\\n\\n    /// @dev Emitted if access control check fails\\n    error RequiresRole(bytes32 role);\\n\\n    /// @dev Emitted for unauthorized actions\\n    error Prohibited();\\n}\\n\",\"keccak256\":\"0xf7d6476297045c5799a21c24560fa4ffd377209b6a0b617685fe67a076548662\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppMsgInspector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IOAppMsgInspector\\n * @dev Interface for the OApp Message Inspector, allowing examination of message and options contents.\\n */\\ninterface IOAppMsgInspector {\\n    // Custom error message for inspection failure\\n    error InspectionFailed(bytes message, bytes options);\\n\\n    /**\\n     * @notice Allows the inspector to examine LayerZero message contents and optionally throw a revert if invalid.\\n     * @param _message The message payload to be inspected.\\n     * @param _options Additional options or parameters for inspection.\\n     * @return valid A boolean indicating whether the inspection passed (true) or failed (false).\\n     *\\n     * @dev Optionally done as a revert, OR use the boolean provided to handle the failure.\\n     */\\n    function inspect(bytes calldata _message, bytes calldata _options) external view returns (bool valid);\\n}\\n\",\"keccak256\":\"0x339654e699043c400cad92de209aa23855ce10211c31cf4114042cc5224d3b7c\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Struct representing enforced option parameters.\\n */\\nstruct EnforcedOptionParam {\\n    uint32 eid; // Endpoint ID\\n    uint16 msgType; // Message Type\\n    bytes options; // Additional options\\n}\\n\\n/**\\n * @title IOAppOptionsType3\\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\\n */\\ninterface IOAppOptionsType3 {\\n    // Custom error message for invalid options\\n    error InvalidOptions(bytes options);\\n\\n    // Event emitted when enforced options are set\\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\\n\\n    /**\\n     * @notice Sets enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OApp message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) external view returns (bytes memory options);\\n}\\n\",\"keccak256\":\"0x9fc08a51e9d7c9c710c4eb26f84fe77228305ad7da63fa486ff24ebf2f3bc461\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/libs/OAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppOptionsType3, EnforcedOptionParam } from \\\"../interfaces/IOAppOptionsType3.sol\\\";\\n\\n/**\\n * @title OAppOptionsType3\\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\\n */\\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\\n    uint16 internal constant OPTION_TYPE_3 = 3;\\n\\n    // @dev The \\\"msgType\\\" should be defined in the child contract.\\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\\n        _setEnforcedOptions(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function _setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) internal virtual {\\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\\n            _assertOptionsType3(_enforcedOptions[i].options);\\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\\n        }\\n\\n        emit EnforcedOptionSet(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OAPP message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     *\\n     * @dev If there is an enforced lzReceive option:\\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) public view virtual returns (bytes memory) {\\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\\n\\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\\n        if (enforced.length == 0) return _extraOptions;\\n\\n        // No caller options, return enforced\\n        if (_extraOptions.length == 0) return enforced;\\n\\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\\n        if (_extraOptions.length >= 2) {\\n            _assertOptionsType3(_extraOptions);\\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\\n            return bytes.concat(enforced, _extraOptions[2:]);\\n        }\\n\\n        // No valid set of options was found.\\n        revert InvalidOptions(_extraOptions);\\n    }\\n\\n    /**\\n     * @dev Internal function to assert that options are of type 3.\\n     * @param _options The options to be checked.\\n     */\\n    function _assertOptionsType3(bytes calldata _options) internal pure virtual {\\n        uint16 optionsType = uint16(bytes2(_options[0:2]));\\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\\n    }\\n}\\n\",\"keccak256\":\"0xe660d85f6380ca10783117b42863a8ec409b8a423812401cfc8d08ebf8f840b3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/OFTAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IERC20Metadata, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IOFT, OFTCore } from \\\"./OFTCore.sol\\\";\\n\\n/**\\n * @title OFTAdapter Contract\\n * @dev OFTAdapter is a contract that adapts an ERC-20 token to the OFT functionality.\\n *\\n * @dev For existing ERC20 tokens, this can be used to convert the token to crosschain compatibility.\\n * @dev WARNING: ONLY 1 of these should exist for a given global mesh,\\n * unless you make a NON-default implementation of OFT and needs to be done very carefully.\\n * @dev WARNING: The default OFTAdapter implementation assumes LOSSLESS transfers, ie. 1 token in, 1 token out.\\n * IF the 'innerToken' applies something like a transfer fee, the default will NOT work...\\n * a pre/post balance check will need to be done to calculate the amountSentLD/amountReceivedLD.\\n */\\nabstract contract OFTAdapter is OFTCore {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 internal immutable innerToken;\\n\\n    /**\\n     * @dev Constructor for the OFTAdapter contract.\\n     * @param _token The address of the ERC-20 token to be adapted.\\n     * @param _lzEndpoint The LayerZero endpoint address.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(\\n        address _token,\\n        address _lzEndpoint,\\n        address _delegate\\n    ) OFTCore(IERC20Metadata(_token).decimals(), _lzEndpoint, _delegate) {\\n        innerToken = IERC20(_token);\\n    }\\n\\n    /**\\n     * @dev Retrieves the address of the underlying ERC20 implementation.\\n     * @return The address of the adapted ERC-20 token.\\n     *\\n     * @dev In the case of OFTAdapter, address(this) and erc20 are NOT the same contract.\\n     */\\n    function token() public view returns (address) {\\n        return address(innerToken);\\n    }\\n\\n    /**\\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\\n     * @return requiresApproval Needs approval of the underlying token implementation.\\n     *\\n     * @dev In the case of default OFTAdapter, approval is required.\\n     * @dev In non-default OFTAdapter contracts with something like mint and burn privileges, it would NOT need approval.\\n     */\\n    function approvalRequired() external pure virtual returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Burns tokens from the sender's specified balance, ie. pull method.\\n     * @param _from The address to debit from.\\n     * @param _amountLD The amount of tokens to send in local decimals.\\n     * @param _minAmountLD The minimum amount to send in local decimals.\\n     * @param _dstEid The destination chain ID.\\n     * @return amountSentLD The amount sent in local decimals.\\n     * @return amountReceivedLD The amount received in local decimals on the remote.\\n     *\\n     * @dev msg.sender will need to approve this _amountLD of tokens to be locked inside of the contract.\\n     * @dev WARNING: The default OFTAdapter implementation assumes LOSSLESS transfers, ie. 1 token in, 1 token out.\\n     * IF the 'innerToken' applies something like a transfer fee, the default will NOT work...\\n     * a pre/post balance check will need to be done to calculate the amountReceivedLD.\\n     */\\n    function _debit(\\n        address _from,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        uint32 _dstEid\\n    ) internal virtual override returns (uint256 amountSentLD, uint256 amountReceivedLD) {\\n        (amountSentLD, amountReceivedLD) = _debitView(_amountLD, _minAmountLD, _dstEid);\\n        // @dev Lock tokens by moving them into this contract from the caller.\\n        innerToken.safeTransferFrom(_from, address(this), amountSentLD);\\n    }\\n\\n    /**\\n     * @dev Credits tokens to the specified address.\\n     * @param _to The address to credit the tokens to.\\n     * @param _amountLD The amount of tokens to credit in local decimals.\\n     * @dev _srcEid The source chain ID.\\n     * @return amountReceivedLD The amount of tokens ACTUALLY received in local decimals.\\n     *\\n     * @dev WARNING: The default OFTAdapter implementation assumes LOSSLESS transfers, ie. 1 token in, 1 token out.\\n     * IF the 'innerToken' applies something like a transfer fee, the default will NOT work...\\n     * a pre/post balance check will need to be done to calculate the amountReceivedLD.\\n     */\\n    function _credit(\\n        address _to,\\n        uint256 _amountLD,\\n        uint32 /*_srcEid*/\\n    ) internal virtual override returns (uint256 amountReceivedLD) {\\n        // @dev Unlock the tokens and transfer to the recipient.\\n        innerToken.safeTransfer(_to, _amountLD);\\n        // @dev In the case of NON-default OFTAdapter, the amountLD MIGHT not be == amountReceivedLD.\\n        return _amountLD;\\n    }\\n}\\n\",\"keccak256\":\"0x1fd96d51186bd236fc2e18b6a3a8ca52369498894aea3dbbddcea84a5fefbb3f\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/OFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { OApp, Origin } from \\\"../oapp/OApp.sol\\\";\\nimport { OAppOptionsType3 } from \\\"../oapp/libs/OAppOptionsType3.sol\\\";\\nimport { IOAppMsgInspector } from \\\"../oapp/interfaces/IOAppMsgInspector.sol\\\";\\n\\nimport { OAppPreCrimeSimulator } from \\\"../precrime/OAppPreCrimeSimulator.sol\\\";\\n\\nimport { IOFT, SendParam, OFTLimit, OFTReceipt, OFTFeeDetail, MessagingReceipt, MessagingFee } from \\\"./interfaces/IOFT.sol\\\";\\nimport { OFTMsgCodec } from \\\"./libs/OFTMsgCodec.sol\\\";\\nimport { OFTComposeMsgCodec } from \\\"./libs/OFTComposeMsgCodec.sol\\\";\\n\\n/**\\n * @title OFTCore\\n * @dev Abstract contract for the OftChain (OFT) token.\\n */\\nabstract contract OFTCore is IOFT, OApp, OAppPreCrimeSimulator, OAppOptionsType3 {\\n    using OFTMsgCodec for bytes;\\n    using OFTMsgCodec for bytes32;\\n\\n    // @notice Provides a conversion rate when swapping between denominations of SD and LD\\n    //      - shareDecimals == SD == shared Decimals\\n    //      - localDecimals == LD == local decimals\\n    // @dev Considers that tokens have different decimal amounts on various chains.\\n    // @dev eg.\\n    //  For a token\\n    //      - locally with 4 decimals --> 1.2345 => uint(12345)\\n    //      - remotely with 2 decimals --> 1.23 => uint(123)\\n    //      - The conversion rate would be 10 ** (4 - 2) = 100\\n    //  @dev If you want to send 1.2345 -> (uint 12345), you CANNOT represent that value on the remote,\\n    //  you can only display 1.23 -> uint(123).\\n    //  @dev To preserve the dust that would otherwise be lost on that conversion,\\n    //  we need to unify a denomination that can be represented on ALL chains inside of the OFT mesh\\n    uint256 public immutable decimalConversionRate;\\n\\n    // @notice Msg types that are used to identify the various OFT operations.\\n    // @dev This can be extended in child contracts for non-default oft operations\\n    // @dev These values are used in things like combineOptions() in OAppOptionsType3.sol.\\n    uint16 public constant SEND = 1;\\n    uint16 public constant SEND_AND_CALL = 2;\\n\\n    // Address of an optional contract to inspect both 'message' and 'options'\\n    address public msgInspector;\\n    event MsgInspectorSet(address inspector);\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _localDecimals The decimals of the token on the local chain (this chain).\\n     * @param _endpoint The address of the LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(uint8 _localDecimals, address _endpoint, address _delegate) OApp(_endpoint, _delegate) {\\n        if (_localDecimals < sharedDecimals()) revert InvalidLocalDecimals();\\n        decimalConversionRate = 10 ** (_localDecimals - sharedDecimals());\\n    }\\n\\n    /**\\n     * @notice Retrieves interfaceID and the version of the OFT.\\n     * @return interfaceId The interface ID.\\n     * @return version The version.\\n     *\\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\\n     */\\n    function oftVersion() external pure virtual returns (bytes4 interfaceId, uint64 version) {\\n        return (type(IOFT).interfaceId, 1);\\n    }\\n\\n    /**\\n     * @dev Retrieves the shared decimals of the OFT.\\n     * @return The shared decimals of the OFT.\\n     *\\n     * @dev Sets an implicit cap on the amount of tokens, over uint64.max() will need some sort of outbound cap / totalSupply cap\\n     * Lowest common decimal denominator between chains.\\n     * Defaults to 6 decimal places to provide up to 18,446,744,073,709.551615 units (max uint64).\\n     * For tokens exceeding this totalSupply(), they will need to override the sharedDecimals function with something smaller.\\n     * ie. 4 sharedDecimals would be 1,844,674,407,370,955.1615\\n     */\\n    function sharedDecimals() public pure virtual returns (uint8) {\\n        return 6;\\n    }\\n\\n    /**\\n     * @dev Sets the message inspector address for the OFT.\\n     * @param _msgInspector The address of the message inspector.\\n     *\\n     * @dev This is an optional contract that can be used to inspect both 'message' and 'options'.\\n     * @dev Set it to address(0) to disable it, or set it to a contract address to enable it.\\n     */\\n    function setMsgInspector(address _msgInspector) public virtual onlyOwner {\\n        msgInspector = _msgInspector;\\n        emit MsgInspectorSet(_msgInspector);\\n    }\\n\\n    /**\\n     * @notice Provides a quote for OFT-related operations.\\n     * @param _sendParam The parameters for the send operation.\\n     * @return oftLimit The OFT limit information.\\n     * @return oftFeeDetails The details of OFT fees.\\n     * @return oftReceipt The OFT receipt information.\\n     */\\n    function quoteOFT(\\n        SendParam calldata _sendParam\\n    )\\n        external\\n        view\\n        virtual\\n        returns (OFTLimit memory oftLimit, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory oftReceipt)\\n    {\\n        uint256 minAmountLD = 0; // Unused in the default implementation.\\n        uint256 maxAmountLD = type(uint64).max; // Unused in the default implementation.\\n        oftLimit = OFTLimit(minAmountLD, maxAmountLD);\\n\\n        // Unused in the default implementation; reserved for future complex fee details.\\n        oftFeeDetails = new OFTFeeDetail[](0);\\n\\n        // @dev This is the same as the send() operation, but without the actual send.\\n        // - amountSentLD is the amount in local decimals that would be sent from the sender.\\n        // - amountReceivedLD is the amount in local decimals that will be credited to the recipient on the remote OFT instance.\\n        // @dev The amountSentLD MIGHT not equal the amount the user actually receives. HOWEVER, the default does.\\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debitView(\\n            _sendParam.amountLD,\\n            _sendParam.minAmountLD,\\n            _sendParam.dstEid\\n        );\\n        oftReceipt = OFTReceipt(amountSentLD, amountReceivedLD);\\n    }\\n\\n    /**\\n     * @notice Provides a quote for the send() operation.\\n     * @param _sendParam The parameters for the send() operation.\\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\\n     * @return msgFee The calculated LayerZero messaging fee from the send() operation.\\n     *\\n     * @dev MessagingFee: LayerZero msg fee\\n     *  - nativeFee: The native fee.\\n     *  - lzTokenFee: The lzToken fee.\\n     */\\n    function quoteSend(\\n        SendParam calldata _sendParam,\\n        bool _payInLzToken\\n    ) external view virtual returns (MessagingFee memory msgFee) {\\n        // @dev mock the amount to receive, this is the same operation used in the send().\\n        // The quote is as similar as possible to the actual send() operation.\\n        (, uint256 amountReceivedLD) = _debitView(_sendParam.amountLD, _sendParam.minAmountLD, _sendParam.dstEid);\\n\\n        // @dev Builds the options and OFT message to quote in the endpoint.\\n        (bytes memory message, bytes memory options) = _buildMsgAndOptions(_sendParam, amountReceivedLD);\\n\\n        // @dev Calculates the LayerZero fee for the send() operation.\\n        return _quote(_sendParam.dstEid, message, options, _payInLzToken);\\n    }\\n\\n    /**\\n     * @dev Executes the send operation.\\n     * @param _sendParam The parameters for the send operation.\\n     * @param _fee The calculated fee for the send() operation.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess funds.\\n     * @return msgReceipt The receipt for the send operation.\\n     * @return oftReceipt The OFT receipt information.\\n     *\\n     * @dev MessagingReceipt: LayerZero msg receipt\\n     *  - guid: The unique identifier for the sent message.\\n     *  - nonce: The nonce of the sent message.\\n     *  - fee: The LayerZero fee incurred for the message.\\n     */\\n    function send(\\n        SendParam calldata _sendParam,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) external payable virtual returns (MessagingReceipt memory msgReceipt, OFTReceipt memory oftReceipt) {\\n        // @dev Applies the token transfers regarding this send() operation.\\n        // - amountSentLD is the amount in local decimals that was ACTUALLY sent/debited from the sender.\\n        // - amountReceivedLD is the amount in local decimals that will be received/credited to the recipient on the remote OFT instance.\\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debit(\\n            msg.sender,\\n            _sendParam.amountLD,\\n            _sendParam.minAmountLD,\\n            _sendParam.dstEid\\n        );\\n\\n        // @dev Builds the options and OFT message to quote in the endpoint.\\n        (bytes memory message, bytes memory options) = _buildMsgAndOptions(_sendParam, amountReceivedLD);\\n\\n        // @dev Sends the message to the LayerZero endpoint and returns the LayerZero msg receipt.\\n        msgReceipt = _lzSend(_sendParam.dstEid, message, options, _fee, _refundAddress);\\n        // @dev Formulate the OFT receipt.\\n        oftReceipt = OFTReceipt(amountSentLD, amountReceivedLD);\\n\\n        emit OFTSent(msgReceipt.guid, _sendParam.dstEid, msg.sender, amountSentLD, amountReceivedLD);\\n    }\\n\\n    /**\\n     * @dev Internal function to build the message and options.\\n     * @param _sendParam The parameters for the send() operation.\\n     * @param _amountLD The amount in local decimals.\\n     * @return message The encoded message.\\n     * @return options The encoded options.\\n     */\\n    function _buildMsgAndOptions(\\n        SendParam calldata _sendParam,\\n        uint256 _amountLD\\n    ) internal view virtual returns (bytes memory message, bytes memory options) {\\n        bool hasCompose;\\n        // @dev This generated message has the msg.sender encoded into the payload so the remote knows who the caller is.\\n        (message, hasCompose) = OFTMsgCodec.encode(\\n            _sendParam.to,\\n            _toSD(_amountLD),\\n            // @dev Must be include a non empty bytes if you want to compose, EVEN if you dont need it on the remote.\\n            // EVEN if you dont require an arbitrary payload to be sent... eg. '0x01'\\n            _sendParam.composeMsg\\n        );\\n        // @dev Change the msg type depending if its composed or not.\\n        uint16 msgType = hasCompose ? SEND_AND_CALL : SEND;\\n        // @dev Combine the callers _extraOptions with the enforced options via the OAppOptionsType3.\\n        options = combineOptions(_sendParam.dstEid, msgType, _sendParam.extraOptions);\\n\\n        // @dev Optionally inspect the message and options depending if the OApp owner has set a msg inspector.\\n        // @dev If it fails inspection, needs to revert in the implementation. ie. does not rely on return boolean\\n        if (msgInspector != address(0)) IOAppMsgInspector(msgInspector).inspect(message, options);\\n    }\\n\\n    /**\\n     * @dev Internal function to handle the receive on the LayerZero endpoint.\\n     * @param _origin The origin information.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address from the src chain.\\n     *  - nonce: The nonce of the LayerZero message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The encoded message.\\n     * @dev _executor The address of the executor.\\n     * @dev _extraData Additional data.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address /*_executor*/, // @dev unused in the default implementation.\\n        bytes calldata /*_extraData*/ // @dev unused in the default implementation.\\n    ) internal virtual override {\\n        // @dev The src sending chain doesnt know the address length on this chain (potentially non-evm)\\n        // Thus everything is bytes32() encoded in flight.\\n        address toAddress = _message.sendTo().bytes32ToAddress();\\n        // @dev Credit the amountLD to the recipient and return the ACTUAL amount the recipient received in local decimals\\n        uint256 amountReceivedLD = _credit(toAddress, _toLD(_message.amountSD()), _origin.srcEid);\\n\\n        if (_message.isComposed()) {\\n            // @dev Proprietary composeMsg format for the OFT.\\n            bytes memory composeMsg = OFTComposeMsgCodec.encode(\\n                _origin.nonce,\\n                _origin.srcEid,\\n                amountReceivedLD,\\n                _message.composeMsg()\\n            );\\n\\n            // @dev Stores the lzCompose payload that will be executed in a separate tx.\\n            // Standardizes functionality for executing arbitrary contract invocation on some non-evm chains.\\n            // @dev The off-chain executor will listen and process the msg based on the src-chain-callers compose options passed.\\n            // @dev The index is used when a OApp needs to compose multiple msgs on lzReceive.\\n            // For default OFT implementation there is only 1 compose msg per lzReceive, thus its always 0.\\n            endpoint.sendCompose(toAddress, _guid, 0 /* the index of the composed message*/, composeMsg);\\n        }\\n\\n        emit OFTReceived(_guid, _origin.srcEid, toAddress, amountReceivedLD);\\n    }\\n\\n    /**\\n     * @dev Internal function to handle the OAppPreCrimeSimulator simulated receive.\\n     * @param _origin The origin information.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address from the src chain.\\n     *  - nonce: The nonce of the LayerZero message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The LayerZero message.\\n     * @param _executor The address of the off-chain executor.\\n     * @param _extraData Arbitrary data passed by the msg executor.\\n     *\\n     * @dev Enables the preCrime simulator to mock sending lzReceive() messages,\\n     * routes the msg down from the OAppPreCrimeSimulator, and back up to the OAppReceiver.\\n     */\\n    function _lzReceiveSimulate(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual override {\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Check if the peer is considered 'trusted' by the OApp.\\n     * @param _eid The endpoint ID to check.\\n     * @param _peer The peer to check.\\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\\n     *\\n     * @dev Enables OAppPreCrimeSimulator to check whether a potential Inbound Packet is from a trusted source.\\n     */\\n    function isPeer(uint32 _eid, bytes32 _peer) public view virtual override returns (bool) {\\n        return peers[_eid] == _peer;\\n    }\\n\\n    /**\\n     * @dev Internal function to remove dust from the given local decimal amount.\\n     * @param _amountLD The amount in local decimals.\\n     * @return amountLD The amount after removing dust.\\n     *\\n     * @dev Prevents the loss of dust when moving amounts between chains with different decimals.\\n     * @dev eg. uint(123) with a conversion rate of 100 becomes uint(100).\\n     */\\n    function _removeDust(uint256 _amountLD) internal view virtual returns (uint256 amountLD) {\\n        return (_amountLD / decimalConversionRate) * decimalConversionRate;\\n    }\\n\\n    /**\\n     * @dev Internal function to convert an amount from shared decimals into local decimals.\\n     * @param _amountSD The amount in shared decimals.\\n     * @return amountLD The amount in local decimals.\\n     */\\n    function _toLD(uint64 _amountSD) internal view virtual returns (uint256 amountLD) {\\n        return _amountSD * decimalConversionRate;\\n    }\\n\\n    /**\\n     * @dev Internal function to convert an amount from local decimals into shared decimals.\\n     * @param _amountLD The amount in local decimals.\\n     * @return amountSD The amount in shared decimals.\\n     */\\n    function _toSD(uint256 _amountLD) internal view virtual returns (uint64 amountSD) {\\n        return uint64(_amountLD / decimalConversionRate);\\n    }\\n\\n    /**\\n     * @dev Internal function to mock the amount mutation from a OFT debit() operation.\\n     * @param _amountLD The amount to send in local decimals.\\n     * @param _minAmountLD The minimum amount to send in local decimals.\\n     * @dev _dstEid The destination endpoint ID.\\n     * @return amountSentLD The amount sent, in local decimals.\\n     * @return amountReceivedLD The amount to be received on the remote chain, in local decimals.\\n     *\\n     * @dev This is where things like fees would be calculated and deducted from the amount to be received on the remote.\\n     */\\n    function _debitView(\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        uint32 /*_dstEid*/\\n    ) internal view virtual returns (uint256 amountSentLD, uint256 amountReceivedLD) {\\n        // @dev Remove the dust so nothing is lost on the conversion between chains with different decimals for the token.\\n        amountSentLD = _removeDust(_amountLD);\\n        // @dev The amount to send is the same as amount received in the default implementation.\\n        amountReceivedLD = amountSentLD;\\n\\n        // @dev Check for slippage.\\n        if (amountReceivedLD < _minAmountLD) {\\n            revert SlippageExceeded(amountReceivedLD, _minAmountLD);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to perform a debit operation.\\n     * @param _from The address to debit.\\n     * @param _amountLD The amount to send in local decimals.\\n     * @param _minAmountLD The minimum amount to send in local decimals.\\n     * @param _dstEid The destination endpoint ID.\\n     * @return amountSentLD The amount sent in local decimals.\\n     * @return amountReceivedLD The amount received in local decimals on the remote.\\n     *\\n     * @dev Defined here but are intended to be overriden depending on the OFT implementation.\\n     * @dev Depending on OFT implementation the _amountLD could differ from the amountReceivedLD.\\n     */\\n    function _debit(\\n        address _from,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        uint32 _dstEid\\n    ) internal virtual returns (uint256 amountSentLD, uint256 amountReceivedLD);\\n\\n    /**\\n     * @dev Internal function to perform a credit operation.\\n     * @param _to The address to credit.\\n     * @param _amountLD The amount to credit in local decimals.\\n     * @param _srcEid The source endpoint ID.\\n     * @return amountReceivedLD The amount ACTUALLY received in local decimals.\\n     *\\n     * @dev Defined here but are intended to be overriden depending on the OFT implementation.\\n     * @dev Depending on OFT implementation the _amountLD could differ from the amountReceivedLD.\\n     */\\n    function _credit(\\n        address _to,\\n        uint256 _amountLD,\\n        uint32 _srcEid\\n    ) internal virtual returns (uint256 amountReceivedLD);\\n}\\n\",\"keccak256\":\"0xcb40339a78632b2fc42708a3f9fa58eb30d6a771d3b99825ff8aa07535e98c67\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/interfaces/IOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { MessagingReceipt, MessagingFee } from \\\"../../oapp/OAppSender.sol\\\";\\n\\n/**\\n * @dev Struct representing token parameters for the OFT send() operation.\\n */\\nstruct SendParam {\\n    uint32 dstEid; // Destination endpoint ID.\\n    bytes32 to; // Recipient address.\\n    uint256 amountLD; // Amount to send in local decimals.\\n    uint256 minAmountLD; // Minimum amount to send in local decimals.\\n    bytes extraOptions; // Additional options supplied by the caller to be used in the LayerZero message.\\n    bytes composeMsg; // The composed message for the send() operation.\\n    bytes oftCmd; // The OFT command to be executed, unused in default OFT implementations.\\n}\\n\\n/**\\n * @dev Struct representing OFT limit information.\\n * @dev These amounts can change dynamically and are up the the specific oft implementation.\\n */\\nstruct OFTLimit {\\n    uint256 minAmountLD; // Minimum amount in local decimals that can be sent to the recipient.\\n    uint256 maxAmountLD; // Maximum amount in local decimals that can be sent to the recipient.\\n}\\n\\n/**\\n * @dev Struct representing OFT receipt information.\\n */\\nstruct OFTReceipt {\\n    uint256 amountSentLD; // Amount of tokens ACTUALLY debited from the sender in local decimals.\\n    // @dev In non-default implementations, the amountReceivedLD COULD differ from this value.\\n    uint256 amountReceivedLD; // Amount of tokens to be received on the remote side.\\n}\\n\\n/**\\n * @dev Struct representing OFT fee details.\\n * @dev Future proof mechanism to provide a standardized way to communicate fees to things like a UI.\\n */\\nstruct OFTFeeDetail {\\n    int256 feeAmountLD; // Amount of the fee in local decimals.\\n    string description; // Description of the fee.\\n}\\n\\n/**\\n * @title IOFT\\n * @dev Interface for the OftChain (OFT) token.\\n * @dev Does not inherit ERC20 to accommodate usage by OFTAdapter as well.\\n * @dev This specific interface ID is '0x02e49c2c'.\\n */\\ninterface IOFT {\\n    // Custom error messages\\n    error InvalidLocalDecimals();\\n    error SlippageExceeded(uint256 amountLD, uint256 minAmountLD);\\n\\n    // Events\\n    event OFTSent(\\n        bytes32 indexed guid, // GUID of the OFT message.\\n        uint32 dstEid, // Destination Endpoint ID.\\n        address indexed fromAddress, // Address of the sender on the src chain.\\n        uint256 amountSentLD, // Amount of tokens sent in local decimals.\\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\\n    );\\n    event OFTReceived(\\n        bytes32 indexed guid, // GUID of the OFT message.\\n        uint32 srcEid, // Source Endpoint ID.\\n        address indexed toAddress, // Address of the recipient on the dst chain.\\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\\n    );\\n\\n    /**\\n     * @notice Retrieves interfaceID and the version of the OFT.\\n     * @return interfaceId The interface ID.\\n     * @return version The version.\\n     *\\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\\n     */\\n    function oftVersion() external view returns (bytes4 interfaceId, uint64 version);\\n\\n    /**\\n     * @notice Retrieves the address of the token associated with the OFT.\\n     * @return token The address of the ERC20 token implementation.\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\\n     * @return requiresApproval Needs approval of the underlying token implementation.\\n     *\\n     * @dev Allows things like wallet implementers to determine integration requirements,\\n     * without understanding the underlying token implementation.\\n     */\\n    function approvalRequired() external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the shared decimals of the OFT.\\n     * @return sharedDecimals The shared decimals of the OFT.\\n     */\\n    function sharedDecimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Provides a quote for OFT-related operations.\\n     * @param _sendParam The parameters for the send operation.\\n     * @return limit The OFT limit information.\\n     * @return oftFeeDetails The details of OFT fees.\\n     * @return receipt The OFT receipt information.\\n     */\\n    function quoteOFT(\\n        SendParam calldata _sendParam\\n    ) external view returns (OFTLimit memory, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory);\\n\\n    /**\\n     * @notice Provides a quote for the send() operation.\\n     * @param _sendParam The parameters for the send() operation.\\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\\n     * @return fee The calculated LayerZero messaging fee from the send() operation.\\n     *\\n     * @dev MessagingFee: LayerZero msg fee\\n     *  - nativeFee: The native fee.\\n     *  - lzTokenFee: The lzToken fee.\\n     */\\n    function quoteSend(SendParam calldata _sendParam, bool _payInLzToken) external view returns (MessagingFee memory);\\n\\n    /**\\n     * @notice Executes the send() operation.\\n     * @param _sendParam The parameters for the send operation.\\n     * @param _fee The fee information supplied by the caller.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess funds from fees etc. on the src.\\n     * @return receipt The LayerZero messaging receipt from the send() operation.\\n     * @return oftReceipt The OFT receipt information.\\n     *\\n     * @dev MessagingReceipt: LayerZero msg receipt\\n     *  - guid: The unique identifier for the sent message.\\n     *  - nonce: The nonce of the sent message.\\n     *  - fee: The LayerZero fee incurred for the message.\\n     */\\n    function send(\\n        SendParam calldata _sendParam,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory, OFTReceipt memory);\\n}\\n\",\"keccak256\":\"0x42431bdbe135f7cfefd0be6cd345a6a1045124f6ea707a06756ef2322140eef5\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/libs/OFTComposeMsgCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary OFTComposeMsgCodec {\\n    // Offset constants for decoding composed messages\\n    uint8 private constant NONCE_OFFSET = 8;\\n    uint8 private constant SRC_EID_OFFSET = 12;\\n    uint8 private constant AMOUNT_LD_OFFSET = 44;\\n    uint8 private constant COMPOSE_FROM_OFFSET = 76;\\n\\n    /**\\n     * @dev Encodes a OFT composed message.\\n     * @param _nonce The nonce value.\\n     * @param _srcEid The source endpoint ID.\\n     * @param _amountLD The amount in local decimals.\\n     * @param _composeMsg The composed message.\\n     * @return _msg The encoded Composed message.\\n     */\\n    function encode(\\n        uint64 _nonce,\\n        uint32 _srcEid,\\n        uint256 _amountLD,\\n        bytes memory _composeMsg // 0x[composeFrom][composeMsg]\\n    ) internal pure returns (bytes memory _msg) {\\n        _msg = abi.encodePacked(_nonce, _srcEid, _amountLD, _composeMsg);\\n    }\\n\\n    /**\\n     * @dev Retrieves the nonce from the composed message.\\n     * @param _msg The message.\\n     * @return The nonce value.\\n     */\\n    function nonce(bytes calldata _msg) internal pure returns (uint64) {\\n        return uint64(bytes8(_msg[:NONCE_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Retrieves the source endpoint ID from the composed message.\\n     * @param _msg The message.\\n     * @return The source endpoint ID.\\n     */\\n    function srcEid(bytes calldata _msg) internal pure returns (uint32) {\\n        return uint32(bytes4(_msg[NONCE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Retrieves the amount in local decimals from the composed message.\\n     * @param _msg The message.\\n     * @return The amount in local decimals.\\n     */\\n    function amountLD(bytes calldata _msg) internal pure returns (uint256) {\\n        return uint256(bytes32(_msg[SRC_EID_OFFSET:AMOUNT_LD_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Retrieves the composeFrom value from the composed message.\\n     * @param _msg The message.\\n     * @return The composeFrom value.\\n     */\\n    function composeFrom(bytes calldata _msg) internal pure returns (bytes32) {\\n        return bytes32(_msg[AMOUNT_LD_OFFSET:COMPOSE_FROM_OFFSET]);\\n    }\\n\\n    /**\\n     * @dev Retrieves the composed message.\\n     * @param _msg The message.\\n     * @return The composed message.\\n     */\\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\\n        return _msg[COMPOSE_FROM_OFFSET:];\\n    }\\n\\n    /**\\n     * @dev Converts an address to bytes32.\\n     * @param _addr The address to convert.\\n     * @return The bytes32 representation of the address.\\n     */\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    /**\\n     * @dev Converts bytes32 to an address.\\n     * @param _b The bytes32 value to convert.\\n     * @return The address representation of bytes32.\\n     */\\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\\n        return address(uint160(uint256(_b)));\\n    }\\n}\\n\",\"keccak256\":\"0xfbdaf41743232e6ff64cd00b495ee854d0225e2bb73a66fe9b413d2780359902\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/libs/OFTMsgCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary OFTMsgCodec {\\n    // Offset constants for encoding and decoding OFT messages\\n    uint8 private constant SEND_TO_OFFSET = 32;\\n    uint8 private constant SEND_AMOUNT_SD_OFFSET = 40;\\n\\n    /**\\n     * @dev Encodes an OFT LayerZero message.\\n     * @param _sendTo The recipient address.\\n     * @param _amountShared The amount in shared decimals.\\n     * @param _composeMsg The composed message.\\n     * @return _msg The encoded message.\\n     * @return hasCompose A boolean indicating whether the message has a composed payload.\\n     */\\n    function encode(\\n        bytes32 _sendTo,\\n        uint64 _amountShared,\\n        bytes memory _composeMsg\\n    ) internal view returns (bytes memory _msg, bool hasCompose) {\\n        hasCompose = _composeMsg.length > 0;\\n        // @dev Remote chains will want to know the composed function caller ie. msg.sender on the src.\\n        _msg = hasCompose\\n            ? abi.encodePacked(_sendTo, _amountShared, addressToBytes32(msg.sender), _composeMsg)\\n            : abi.encodePacked(_sendTo, _amountShared);\\n    }\\n\\n    /**\\n     * @dev Checks if the OFT message is composed.\\n     * @param _msg The OFT message.\\n     * @return A boolean indicating whether the message is composed.\\n     */\\n    function isComposed(bytes calldata _msg) internal pure returns (bool) {\\n        return _msg.length > SEND_AMOUNT_SD_OFFSET;\\n    }\\n\\n    /**\\n     * @dev Retrieves the recipient address from the OFT message.\\n     * @param _msg The OFT message.\\n     * @return The recipient address.\\n     */\\n    function sendTo(bytes calldata _msg) internal pure returns (bytes32) {\\n        return bytes32(_msg[:SEND_TO_OFFSET]);\\n    }\\n\\n    /**\\n     * @dev Retrieves the amount in shared decimals from the OFT message.\\n     * @param _msg The OFT message.\\n     * @return The amount in shared decimals.\\n     */\\n    function amountSD(bytes calldata _msg) internal pure returns (uint64) {\\n        return uint64(bytes8(_msg[SEND_TO_OFFSET:SEND_AMOUNT_SD_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Retrieves the composed message from the OFT message.\\n     * @param _msg The OFT message.\\n     * @return The composed message.\\n     */\\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\\n        return _msg[SEND_AMOUNT_SD_OFFSET:];\\n    }\\n\\n    /**\\n     * @dev Converts an address to bytes32.\\n     * @param _addr The address to convert.\\n     * @return The bytes32 representation of the address.\\n     */\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    /**\\n     * @dev Converts bytes32 to an address.\\n     * @param _b The bytes32 value to convert.\\n     * @return The address representation of bytes32.\\n     */\\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\\n        return address(uint160(uint256(_b)));\\n    }\\n}\\n\",\"keccak256\":\"0x5358948017669c03e157f871d8c38e988f9004dbd0801ad3119d2487f0d40b0b\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/precrime/OAppPreCrimeSimulator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IPreCrime } from \\\"./interfaces/IPreCrime.sol\\\";\\nimport { IOAppPreCrimeSimulator, InboundPacket, Origin } from \\\"./interfaces/IOAppPreCrimeSimulator.sol\\\";\\n\\n/**\\n * @title OAppPreCrimeSimulator\\n * @dev Abstract contract serving as the base for preCrime simulation functionality in an OApp.\\n */\\nabstract contract OAppPreCrimeSimulator is IOAppPreCrimeSimulator, Ownable {\\n    // The address of the preCrime implementation.\\n    address public preCrime;\\n\\n    /**\\n     * @dev Retrieves the address of the OApp contract.\\n     * @return The address of the OApp contract.\\n     *\\n     * @dev The simulator contract is the base contract for the OApp by default.\\n     * @dev If the simulator is a separate contract, override this function.\\n     */\\n    function oApp() external view virtual returns (address) {\\n        return address(this);\\n    }\\n\\n    /**\\n     * @dev Sets the preCrime contract address.\\n     * @param _preCrime The address of the preCrime contract.\\n     */\\n    function setPreCrime(address _preCrime) public virtual onlyOwner {\\n        preCrime = _preCrime;\\n        emit PreCrimeSet(_preCrime);\\n    }\\n\\n    /**\\n     * @dev Interface for pre-crime simulations. Always reverts at the end with the simulation results.\\n     * @param _packets An array of InboundPacket objects representing received packets to be delivered.\\n     *\\n     * @dev WARNING: MUST revert at the end with the simulation results.\\n     * @dev Gives the preCrime implementation the ability to mock sending packets to the lzReceive function,\\n     * WITHOUT actually executing them.\\n     */\\n    function lzReceiveAndRevert(InboundPacket[] calldata _packets) public payable virtual {\\n        for (uint256 i = 0; i < _packets.length; i++) {\\n            InboundPacket calldata packet = _packets[i];\\n\\n            // Ignore packets that are not from trusted peers.\\n            if (!isPeer(packet.origin.srcEid, packet.origin.sender)) continue;\\n\\n            // @dev Because a verifier is calling this function, it doesnt have access to executor params:\\n            //  - address _executor\\n            //  - bytes calldata _extraData\\n            // preCrime will NOT work for OApps that rely on these two parameters inside of their _lzReceive().\\n            // They are instead stubbed to default values, address(0) and bytes(\\\"\\\")\\n            // @dev Calling this.lzReceiveSimulate removes ability for assembly return 0 callstack exit,\\n            // which would cause the revert to be ignored.\\n            this.lzReceiveSimulate{ value: packet.value }(\\n                packet.origin,\\n                packet.guid,\\n                packet.message,\\n                packet.executor,\\n                packet.extraData\\n            );\\n        }\\n\\n        // @dev Revert with the simulation results. msg.sender must implement IPreCrime.buildSimulationResult().\\n        revert SimulationResult(IPreCrime(msg.sender).buildSimulationResult());\\n    }\\n\\n    /**\\n     * @dev Is effectively an internal function because msg.sender must be address(this).\\n     * Allows resetting the call stack for 'internal' calls.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier of the packet.\\n     * @param _message The message payload of the packet.\\n     * @param _executor The executor address for the packet.\\n     * @param _extraData Additional data for the packet.\\n     */\\n    function lzReceiveSimulate(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable virtual {\\n        // @dev Ensure ONLY can be called 'internally'.\\n        if (msg.sender != address(this)) revert OnlySelf();\\n        _lzReceiveSimulate(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to handle the OAppPreCrimeSimulator simulated receive.\\n     * @param _origin The origin information.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address from the src chain.\\n     *  - nonce: The nonce of the LayerZero message.\\n     * @param _guid The GUID of the LayerZero message.\\n     * @param _message The LayerZero message.\\n     * @param _executor The address of the off-chain executor.\\n     * @param _extraData Arbitrary data passed by the msg executor.\\n     *\\n     * @dev Enables the preCrime simulator to mock sending lzReceive() messages,\\n     * routes the msg down from the OAppPreCrimeSimulator, and back up to the OAppReceiver.\\n     */\\n    function _lzReceiveSimulate(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n\\n    /**\\n     * @dev checks if the specified peer is considered 'trusted' by the OApp.\\n     * @param _eid The endpoint Id to check.\\n     * @param _peer The peer to check.\\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\\n     */\\n    function isPeer(uint32 _eid, bytes32 _peer) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x205a0abfd8b3c9af2740769f251381b84999b8e9347f3cd50de3ef8290a17750\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/precrime/interfaces/IOAppPreCrimeSimulator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the Origin so it's exposed to OAppPreCrimeSimulator implementers.\\n// solhint-disable-next-line no-unused-import\\nimport { InboundPacket, Origin } from \\\"../libs/Packet.sol\\\";\\n\\n/**\\n * @title IOAppPreCrimeSimulator Interface\\n * @dev Interface for the preCrime simulation functionality in an OApp.\\n */\\ninterface IOAppPreCrimeSimulator {\\n    // @dev simulation result used in PreCrime implementation\\n    error SimulationResult(bytes result);\\n    error OnlySelf();\\n\\n    /**\\n     * @dev Emitted when the preCrime contract address is set.\\n     * @param preCrimeAddress The address of the preCrime contract.\\n     */\\n    event PreCrimeSet(address preCrimeAddress);\\n\\n    /**\\n     * @dev Retrieves the address of the preCrime contract implementation.\\n     * @return The address of the preCrime contract.\\n     */\\n    function preCrime() external view returns (address);\\n\\n    /**\\n     * @dev Retrieves the address of the OApp contract.\\n     * @return The address of the OApp contract.\\n     */\\n    function oApp() external view returns (address);\\n\\n    /**\\n     * @dev Sets the preCrime contract address.\\n     * @param _preCrime The address of the preCrime contract.\\n     */\\n    function setPreCrime(address _preCrime) external;\\n\\n    /**\\n     * @dev Mocks receiving a packet, then reverts with a series of data to infer the state/result.\\n     * @param _packets An array of LayerZero InboundPacket objects representing received packets.\\n     */\\n    function lzReceiveAndRevert(InboundPacket[] calldata _packets) external payable;\\n\\n    /**\\n     * @dev checks if the specified peer is considered 'trusted' by the OApp.\\n     * @param _eid The endpoint Id to check.\\n     * @param _peer The peer to check.\\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\\n     */\\n    function isPeer(uint32 _eid, bytes32 _peer) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5d24db150949ea8e6437178e65a942e8c8b7f332e5daf32750f56b23b35b5bb2\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/precrime/interfaces/IPreCrime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\nstruct PreCrimePeer {\\n    uint32 eid;\\n    bytes32 preCrime;\\n    bytes32 oApp;\\n}\\n\\n// TODO not done yet\\ninterface IPreCrime {\\n    error OnlyOffChain();\\n\\n    // for simulate()\\n    error PacketOversize(uint256 max, uint256 actual);\\n    error PacketUnsorted();\\n    error SimulationFailed(bytes reason);\\n\\n    // for preCrime()\\n    error SimulationResultNotFound(uint32 eid);\\n    error InvalidSimulationResult(uint32 eid, bytes reason);\\n    error CrimeFound(bytes crime);\\n\\n    function getConfig(bytes[] calldata _packets, uint256[] calldata _packetMsgValues) external returns (bytes memory);\\n\\n    function simulate(\\n        bytes[] calldata _packets,\\n        uint256[] calldata _packetMsgValues\\n    ) external payable returns (bytes memory);\\n\\n    function buildSimulationResult() external view returns (bytes memory);\\n\\n    function preCrime(\\n        bytes[] calldata _packets,\\n        uint256[] calldata _packetMsgValues,\\n        bytes[] calldata _simulations\\n    ) external;\\n\\n    function version() external view returns (uint64 major, uint8 minor);\\n}\\n\",\"keccak256\":\"0xc8d869f27ef8ceb2e13fdf6a70682fd4dee3f90c4924eb8e125bc1e66cb6af84\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/precrime/libs/Packet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { PacketV1Codec } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\n\\n/**\\n * @title InboundPacket\\n * @dev Structure representing an inbound packet received by the contract.\\n */\\nstruct InboundPacket {\\n    Origin origin; // Origin information of the packet.\\n    uint32 dstEid; // Destination endpointId of the packet.\\n    address receiver; // Receiver address for the packet.\\n    bytes32 guid; // Unique identifier of the packet.\\n    uint256 value; // msg.value of the packet.\\n    address executor; // Executor address for the packet.\\n    bytes message; // Message payload of the packet.\\n    bytes extraData; // Additional arbitrary data for the packet.\\n}\\n\\n/**\\n * @title PacketDecoder\\n * @dev Library for decoding LayerZero packets.\\n */\\nlibrary PacketDecoder {\\n    using PacketV1Codec for bytes;\\n\\n    /**\\n     * @dev Decode an inbound packet from the given packet data.\\n     * @param _packet The packet data to decode.\\n     * @return packet An InboundPacket struct representing the decoded packet.\\n     */\\n    function decode(bytes calldata _packet) internal pure returns (InboundPacket memory packet) {\\n        packet.origin = Origin(_packet.srcEid(), _packet.sender(), _packet.nonce());\\n        packet.dstEid = _packet.dstEid();\\n        packet.receiver = _packet.receiverB20();\\n        packet.guid = _packet.guid();\\n        packet.message = _packet.message();\\n    }\\n\\n    /**\\n     * @dev Decode multiple inbound packets from the given packet data and associated message values.\\n     * @param _packets An array of packet data to decode.\\n     * @param _packetMsgValues An array of associated message values for each packet.\\n     * @return packets An array of InboundPacket structs representing the decoded packets.\\n     */\\n    function decode(\\n        bytes[] calldata _packets,\\n        uint256[] memory _packetMsgValues\\n    ) internal pure returns (InboundPacket[] memory packets) {\\n        packets = new InboundPacket[](_packets.length);\\n        for (uint256 i = 0; i < _packets.length; i++) {\\n            bytes calldata packet = _packets[i];\\n            packets[i] = PacketDecoder.decode(packet);\\n            // @dev Allows the verifier to specify the msg.value that gets passed in lzReceive.\\n            packets[i].value = _packetMsgValues[i];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcb2fb1c5b2eb3731de78b479b9c2ab3bba326fe0b0b3a008590f18e881e457a6\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport { SetConfigParam } from \\\"./IMessageLibManager.sol\\\";\\n\\nenum MessageLibType {\\n    Send,\\n    Receive,\\n    SendAndReceive\\n}\\n\\ninterface IMessageLib is IERC165 {\\n    function setConfig(address _oapp, SetConfigParam[] calldata _config) external;\\n\\n    function getConfig(uint32 _eid, address _oapp, uint32 _configType) external view returns (bytes memory config);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    // message libs of same major version are compatible\\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\\n\\n    function messageLibType() external view returns (MessageLibType);\\n}\\n\",\"keccak256\":\"0x5cf5f24751b4e3ea1c9c5ded07cedfdfd62566b6daaffcc0144733859c9dba0c\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _timeout) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _gracePeriod) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0xd710f9efe703982e8eabe15d19d6114af753ef42f2796551da782a0fb6633e4b\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ISendLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { MessagingFee } from \\\"./ILayerZeroEndpointV2.sol\\\";\\nimport { IMessageLib } from \\\"./IMessageLib.sol\\\";\\n\\nstruct Packet {\\n    uint64 nonce;\\n    uint32 srcEid;\\n    address sender;\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes32 guid;\\n    bytes message;\\n}\\n\\ninterface ISendLib is IMessageLib {\\n    function send(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external returns (MessagingFee memory, bytes memory encodedPacket);\\n\\n    function quote(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external view returns (MessagingFee memory);\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function withdrawFee(address _to, uint256 _amount) external;\\n\\n    function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xf1c07bc61e7b1dce195ed12d50f87980fbf2d63cac1326fd28287f55fe0ba625\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary AddressCast {\\n    error AddressCast_InvalidSizeForAddress();\\n    error AddressCast_InvalidAddress();\\n\\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\\n        result = bytes32(_addressBytes);\\n        unchecked {\\n            uint256 offset = 32 - _addressBytes.length;\\n            result = result >> (offset * 8);\\n        }\\n    }\\n\\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\\n        result = bytes32(uint256(uint160(_address)));\\n    }\\n\\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\\n        if (_size == 0 || _size > 32) revert AddressCast_InvalidSizeForAddress();\\n        result = new bytes(_size);\\n        unchecked {\\n            uint256 offset = 256 - _size * 8;\\n            assembly {\\n                mstore(add(result, 32), shl(offset, _addressBytes32))\\n            }\\n        }\\n    }\\n\\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\\n        result = address(uint160(uint256(_addressBytes32)));\\n    }\\n\\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\\n        result = address(bytes20(_addressBytes));\\n    }\\n}\\n\",\"keccak256\":\"0x2ebbcaaab3554edcd41b581f1a72ac1806afbfb8047d0d47ff098f9af30d6deb\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { Packet } from \\\"../../interfaces/ISendLib.sol\\\";\\nimport { AddressCast } from \\\"../../libs/AddressCast.sol\\\";\\n\\nlibrary PacketV1Codec {\\n    using AddressCast for address;\\n    using AddressCast for bytes32;\\n\\n    uint8 internal constant PACKET_VERSION = 1;\\n\\n    // header (version + nonce + path)\\n    // version\\n    uint256 private constant PACKET_VERSION_OFFSET = 0;\\n    //    nonce\\n    uint256 private constant NONCE_OFFSET = 1;\\n    //    path\\n    uint256 private constant SRC_EID_OFFSET = 9;\\n    uint256 private constant SENDER_OFFSET = 13;\\n    uint256 private constant DST_EID_OFFSET = 45;\\n    uint256 private constant RECEIVER_OFFSET = 49;\\n    // payload (guid + message)\\n    uint256 private constant GUID_OFFSET = 81; // keccak256(nonce + path)\\n    uint256 private constant MESSAGE_OFFSET = 113;\\n\\n    function encode(Packet memory _packet) internal pure returns (bytes memory encodedPacket) {\\n        encodedPacket = abi.encodePacked(\\n            PACKET_VERSION,\\n            _packet.nonce,\\n            _packet.srcEid,\\n            _packet.sender.toBytes32(),\\n            _packet.dstEid,\\n            _packet.receiver,\\n            _packet.guid,\\n            _packet.message\\n        );\\n    }\\n\\n    function encodePacketHeader(Packet memory _packet) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                PACKET_VERSION,\\n                _packet.nonce,\\n                _packet.srcEid,\\n                _packet.sender.toBytes32(),\\n                _packet.dstEid,\\n                _packet.receiver\\n            );\\n    }\\n\\n    function encodePayload(Packet memory _packet) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_packet.guid, _packet.message);\\n    }\\n\\n    function header(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return _packet[0:GUID_OFFSET];\\n    }\\n\\n    function version(bytes calldata _packet) internal pure returns (uint8) {\\n        return uint8(bytes1(_packet[PACKET_VERSION_OFFSET:NONCE_OFFSET]));\\n    }\\n\\n    function nonce(bytes calldata _packet) internal pure returns (uint64) {\\n        return uint64(bytes8(_packet[NONCE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    function srcEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[SRC_EID_OFFSET:SENDER_OFFSET]));\\n    }\\n\\n    function sender(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[SENDER_OFFSET:DST_EID_OFFSET]);\\n    }\\n\\n    function senderAddressB20(bytes calldata _packet) internal pure returns (address) {\\n        return sender(_packet).toAddress();\\n    }\\n\\n    function dstEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[DST_EID_OFFSET:RECEIVER_OFFSET]));\\n    }\\n\\n    function receiver(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[RECEIVER_OFFSET:GUID_OFFSET]);\\n    }\\n\\n    function receiverB20(bytes calldata _packet) internal pure returns (address) {\\n        return receiver(_packet).toAddress();\\n    }\\n\\n    function guid(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[GUID_OFFSET:MESSAGE_OFFSET]);\\n    }\\n\\n    function message(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[MESSAGE_OFFSET:]);\\n    }\\n\\n    function payload(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[GUID_OFFSET:]);\\n    }\\n\\n    function payloadHash(bytes calldata _packet) internal pure returns (bytes32) {\\n        return keccak256(payload(_packet));\\n    }\\n}\\n\",\"keccak256\":\"0xc84cf1bf785977fe1fbe7566eef902c2db68d0e163813ebe6c34921754802680\",\"license\":\"LZBL-1.2\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Address} from \\\"./Address.sol\\\";\\nimport {Context} from \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\\n * selectors won't filter calls nested within a {multicall} operation.\\n *\\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\\n * {_msgSender} are not propagated to subcalls.\\n */\\nabstract contract Multicall is Context {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        bytes memory context = msg.sender == _msgSender()\\n            ? new bytes(0)\\n            : msg.data[msg.data.length - _contextSuffixLength():];\\n\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbd8e639a2845206c2525c3e41892232a78372d952974bc1d2809b6879f6946\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/JasmineHubBridge.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.24;\\n\\n// TODO: Override Ownable to point to JasminePoolFactory's owner\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { OApp, MessagingFee, Origin } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OApp.sol\\\";\\nimport { MessagingReceipt } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppSender.sol\\\";\\nimport { OFTPermitAdapter } from \\\"./extensions/OFTPermitAdapter.sol\\\";\\nimport { BytesLib } from \\\"./utilities/BytesLib.sol\\\";\\nimport { Create3 } from \\\"@0xsequence/create3/contracts/Create3.sol\\\";\\n\\n\\ncontract JasmineHubBridge is OApp {\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Libraries\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    using BytesLib for address;\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Events\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /// TODO: docs\\n    event OFTAdapterCreated(address indexed underlying, address indexed adapter);\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Custom Errors\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    error AdapterExists(address underlying, address adapter);\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Fields\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    mapping(address underlying => address oftAdapter) public adapters;\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Setup\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    constructor(address _endpoint, address _delegate) OApp(_endpoint, _delegate) Ownable(_delegate) {}\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Admin Functionality\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    function createAdapter(address underlying) external onlyOwner returns (address adapter) {\\n        if (adapters[underlying] != address(0)) revert AdapterExists(underlying, adapters[underlying]);\\n\\n        adapter = Create3.create3(underlying.toBytes32(), encodeAdapterCreationCode(underlying));\\n        adapters[underlying] = adapter;\\n\\n        emit OFTAdapterCreated(underlying, adapter);\\n    }\\n\\n    function setAdapterPeer(address _adapter, uint32 _eid, bytes32 _peer) external onlyOwner {\\n        OFTPermitAdapter(_adapter).setPeer(_eid, _peer);\\n    }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  LayerZero Functions\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata payload,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal override {\\n        // data = abi.decode(payload, (string));\\n    }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Utility Functions\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    function predictAdapterAddress(address underlying) public view returns (address) {\\n        return Create3.addressOf(underlying.toBytes32());\\n    }\\n\\n    function encodeAdapterCreationCode(address underlying) private view returns (bytes memory) {\\n        return abi.encodePacked(\\n            type(OFTPermitAdapter).creationCode,\\n            abi.encode(underlying, endpoint, address(this))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0223ba3b0b7bc7eedc8a44f8612495deb2ffa4e5b0e4794608a6623905b3176d\",\"license\":\"BUSL-1.1\"},\"contracts/extensions/OFTPermitAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.24;\\n\\n//  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n//  Imports\\n//  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\nimport { OFTAdapter } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/OFTAdapter.sol\\\";\\nimport { OApp, MessagingFee, Origin } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OApp.sol\\\";\\nimport { OFTMsgCodec } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/libs/OFTMsgCodec.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Multicall } from \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport { MessageLib } from \\\"../utilities/MessageLib.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport { IJasminePool } from \\\"../interfaces/jasmine/IJasminePool.sol\\\";\\nimport { JasmineErrors } from \\\"@jasmine-energy/pools-contracts/contracts/interfaces/errors/JasmineErrors.sol\\\";\\n\\n\\n/**\\n * @title OFTPermitAdapter\\n * @author Kai Aldag<kai.aldag@jasmine.energy>\\n * @notice Extension of OFTAdapter that allows ERC-2612 permit allowance to be used for OFT deposits.\\n * @custom:security-contact Kai Aldag<kai.aldag@jasmine.energy\\n */\\ncontract OFTPermitAdapter is OFTAdapter, Multicall {\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Libraries\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    using MessageLib for bytes;\\n    using OFTMsgCodec for bytes;\\n    using OFTMsgCodec for bytes32;\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Events\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Fields\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Setup\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @dev Constructor for the OFTAdapter contract.\\n     * @param _token The address of the ERC-20 token to be adapted.\\n     * @param _lzEndpoint The LayerZero endpoint address.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(\\n        address _token,\\n        address _lzEndpoint,\\n        address _delegate\\n    ) OFTAdapter(_token, _lzEndpoint, _delegate) Ownable(_delegate) {}\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Permit Functions\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /// @dev Permits this contract to spend the holder's inner token. This is designed\\n    // to be called prior to `send()` using a multicall to bypass the pre-approval tx requirement.\\n    function permitInnerToken(address holder, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        IERC20Permit(address(innerToken)).permit(holder, address(this), value, deadline, v, r, s);\\n    }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  LayerZero Functions\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @dev\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata payload,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal override {\\n        // NOTE: If extra data provided, parse and execute operation\\n        if (_extraData.length != 0) {\\n            _executeLzMessage(_extraData);\\n            // QUESTION: Emit here or in _executeLzMessage?\\n            emit OFTReceived(_guid, _origin.srcEid, payload.sendTo().bytes32ToAddress(), _toLD(payload.amountSD()));\\n        } else {\\n            super._lzReceive(_origin, _guid, payload, _executor, _extraData);\\n        }\\n    }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Internal Utilities\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  Message Parsing  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\\\\\\\\\n\\n    function _executeLzMessage(bytes calldata message) internal {\\n        (bool isValid, MessageLib.MessageType operation) = message._decodeMessageType();\\n        if (!isValid) revert MessageLib.InvalidMessageType(message[0]);\\n\\n        if (operation == MessageLib.MessageType.TRANSFER) {\\n            // TODO: Implement\\n        } else if (operation == MessageLib.MessageType.RETIREMENT) {\\n            (address beneficiary, uint256 amount, bytes memory data) = message._decodeRetirementMessage();\\n            _retireJLT(beneficiary, amount, data);\\n        } else if (operation == MessageLib.MessageType.WITHDRAW_ANY) {\\n            // TODO: Implement\\n        } else if (operation == MessageLib.MessageType.WITHDRAW_SPECIFIC) {\\n            // TODO: Implement\\n        } else {\\n            revert MessageLib.InvalidMessageType(message[0]);\\n        }\\n    }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  JLT Interactions  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\\\\\\\\\n\\n    function _retireJLT(address beneficiary, uint256 amount, bytes memory data) internal {\\n        IJasminePool(address(innerToken)).retire(address(this), beneficiary, amount, data);\\n    }\\n\\n    function _transferJLT(address recipient, uint256 amount) internal {\\n        // TODO: Transfer JLT\\n    }\\n\\n    function _withdrawJLT(address recipient, uint256 amount) internal {\\n        // TODO: Withdraw JLT\\n    }\\n}\\n\",\"keccak256\":\"0x05b6409d32dacb1f7d6bcd8acd7396ea733b679ffa70304ce76befd8ce162646\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/jasmine/IEATBackedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title Jasmine EAT Backed Pool Interface\\n * @author Kai Aldag<kai.aldag@jasmine.energy>\\n * @notice Contains functionality and events for pools which issue JLTs for EATs\\n *         deposits and permit withdrawals of EATs.\\n * @dev Due to linearization issues, ERC-20 and ERC-1155 Receiver are not enforced\\n *      conformances - but likely should be.\\n * @custom:security-contact dev@jasmine.energy\\n */\\ninterface IJasmineEATBackedPool {\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Events\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @dev Emitted whenever EATs are deposited to the contract\\n     * \\n     * @param operator Initiator of the deposit\\n     * @param owner Token holder depositting to contract\\n     * @param quantity Number of EATs deposited. Note: JLTs issued are 1-1 with EATs\\n     */\\n    event Deposit(\\n        address indexed operator,\\n        address indexed owner,\\n        uint256 quantity\\n    );\\n\\n    /**\\n     * @dev Emitted whenever EATs are withdrawn from the contract\\n     * \\n     * @param sender Initiator of the deposit\\n     * @param receiver Token holder depositting to contract\\n     * @param quantity Number of EATs withdrawn.\\n     */\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 quantity\\n    );\\n\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Deposit and Withdraw Functionality\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @notice Used to deposit EATs into the pool to receive JLTs.\\n     * \\n     * @dev Requirements:\\n     *     - Pool must be an approved operator of from address\\n     * \\n     * @param tokenId EAT token ID to deposit\\n     * @param quantity Number of EATs for given tokenId to deposit\\n     * \\n     * @return jltQuantity Number of JLTs issued for deposit\\n     * \\n     * Emits a {Deposit} event.\\n     */\\n    function deposit(\\n        uint256 tokenId, \\n        uint256 quantity\\n    ) external returns (uint256 jltQuantity);\\n\\n    /**\\n     * @notice Used to deposit EATs from another account into the pool to receive JLTs.\\n     * \\n     * @dev Requirements:\\n     *     - Pool must be an approved operator of from address\\n     *     - msg.sender must be approved for the user's tokens\\n     * \\n     * @param from Address from which to transfer EATs to pool\\n     * @param tokenId EAT token ID to deposit\\n     * @param quantity Number of EATs for given tokenId to deposit\\n     * \\n     * @return jltQuantity Number of JLTs issued for deposit\\n     * \\n     * Emits a {Deposit} event.\\n     */\\n    function depositFrom(\\n        address from, \\n        uint256 tokenId, \\n        uint256 quantity\\n    ) external returns (uint256 jltQuantity);\\n\\n    /**\\n     * @notice Used to deposit numerous EATs of different IDs\\n     * into the pool to receive JLTs.\\n     * \\n     * @dev Requirements:\\n     *     - Pool must be an approved operator of from address\\n     *     - Lenght of tokenIds and quantities must match\\n     * \\n     * @param from Address from which to transfer EATs to pool\\n     * @param tokenIds EAT token IDs to deposit\\n     * @param quantities Number of EATs for tokenId at same index to deposit\\n     * \\n     * @return jltQuantity Number of JLTs issued for deposit\\n     * \\n     * Emits a {Deposit} event.\\n     */\\n    function depositBatch(\\n        address from, \\n        uint256[] calldata tokenIds, \\n        uint256[] calldata quantities\\n    ) external returns (uint256 jltQuantity);\\n\\n\\n    /**\\n     * @notice Withdraw EATs from pool by burning 'quantity' of JLTs from 'owner'.\\n     * \\n     * @dev Pool will automatically select EATs to withdraw. Defer to {withdrawSpecific}\\n     *      if selecting specific EATs to withdraw is important.\\n     * \\n     * @dev Requirements:\\n     *     - msg.sender must have sufficient JLTs\\n     *     - If recipient is a contract, it must implement onERC1155Received & onERC1155BatchReceived\\n     * \\n     * @param recipient Address to receive withdrawn EATs\\n     * @param quantity Number of JLTs to withdraw\\n     * @param data Optional calldata to relay to recipient via onERC1155Received\\n     * \\n     * @return tokenIds Token IDs withdrawn from the pool\\n     * @return amounts Number of tokens withdraw, per ID, from the pool\\n     * \\n     * Emits a {Withdraw} event.\\n     */\\n    function withdraw(\\n        address recipient, \\n        uint256 quantity, \\n        bytes calldata data\\n    ) external returns (uint256[] memory tokenIds, uint256[] memory amounts);\\n\\n    /**\\n     * @notice Withdraw EATs from pool by burning 'quantity' of JLTs from 'owner'.\\n     * \\n     * @dev Pool will automatically select EATs to withdraw. Defer to {withdrawSpecific}\\n     *      if selecting specific EATs to withdraw is important.\\n     * \\n     * @dev Requirements:\\n     *     - msg.sender must be approved for owner's JLTs\\n     *     - Owner must have sufficient JLTs\\n     *     - If recipient is a contract, it must implement onERC1155Received & onERC1155BatchReceived\\n     * \\n     * @param spender JLT owner from which to burn tokens\\n     * @param recipient Address to receive withdrawn EATs\\n     * @param quantity Number of JLTs to withdraw\\n     * @param data Optional calldata to relay to recipient via onERC1155Received\\n     * \\n     * @return tokenIds Token IDs withdrawn from the pool\\n     * @return amounts Number of tokens withdraw, per ID, from the pool\\n     * \\n     * Emits a {Withdraw} event.\\n     */\\n    function withdrawFrom(\\n        address spender, \\n        address recipient, \\n        uint256 quantity, \\n        bytes calldata data\\n    ) external returns (uint256[] memory tokenIds, uint256[] memory amounts);\\n\\n    /**\\n     * @notice Withdraw specific EATs from pool by burning the sum of 'quantities' in JLTs from 'owner'.\\n     * \\n     * @dev Requirements:\\n     *     - msg.sender must be approved for owner's JLTs\\n     *     - Length of tokenIds and quantities must match\\n     *     - Owner must have more JLTs than sum of quantities\\n     *     - If recipient is a contract, it must implement onERC1155Received & onERC1155BatchReceived\\n     *     - Owner and Recipient cannot be zero address\\n     * \\n     * @param spender JLT owner from which to burn tokens\\n     * @param recipient Address to receive withdrawn EATs\\n     * @param tokenIds EAT token IDs to withdraw from pool\\n     * @param quantities Number of EATs for tokenId at same index to deposit\\n     * @param data Optional calldata to relay to recipient via onERC1155Received\\n     * \\n     * Emits a {Withdraw} event.\\n     */\\n    function withdrawSpecific(\\n        address spender, \\n        address recipient, \\n        uint256[] calldata tokenIds, \\n        uint256[] calldata quantities, \\n        bytes calldata data\\n    ) external;\\n\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Costing Functions\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @notice Cost of withdrawing specified amounts of tokens from pool.\\n     * \\n     * @param tokenIds IDs of EATs to withdaw\\n     * @param amounts Amounts of EATs to withdaw\\n     * \\n     * @return cost Price of withdrawing EATs in JLTs\\n     */\\n    function withdrawalCost(\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts\\n    ) external view returns (uint256 cost);\\n\\n    /**\\n     * @notice Cost of withdrawing amount of tokens from pool where pool\\n     *         selects the tokens to withdraw.\\n     * \\n     * @param amount Number of EATs to withdraw.\\n     * \\n     * @return cost Price of withdrawing EATs in JLTs\\n     */\\n    function withdrawalCost(uint256 amount) external view returns (uint256 cost);\\n}\\n\",\"keccak256\":\"0xc066b2413fd9818f9ec85bf473ac3b1ce7c964a079e9d9bd43a23c08adb71a47\",\"license\":\"MIT\"},\"contracts/interfaces/jasmine/IJasminePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IJasmineEATBackedPool } from \\\"./IEATBackedPool.sol\\\";\\nimport { IJasmineQualifiedPool } from \\\"./IQualifiedPool.sol\\\";\\nimport { IJasmineRetireablePool } from \\\"./IRetireablePool.sol\\\";\\n\\ninterface IJasminePool is IJasmineEATBackedPool, IJasmineQualifiedPool, IJasmineRetireablePool {\\n\\n}\\n\",\"keccak256\":\"0x4b8e48047908f5fd7b5bb2c097bd6da588631bec8fad321c09a064f01b8b85ae\",\"license\":\"MIT\"},\"contracts/interfaces/jasmine/IQualifiedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title Jasmine Qualified Pool Interface\\n * @author Kai Aldag<kai.aldag@jasmine.energy>\\n * @notice Interface for any pool that has a deposit policy\\n * which constrains deposits.\\n * @custom:security-contact dev@jasmine.energy\\n */\\ninterface IJasmineQualifiedPool {\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Errors\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /// @dev Emitted if a token does not meet pool's deposit policy\\n    error Unqualified(uint256 tokenId);\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Qualification Functions\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @notice Checks if a given Jasmine EAT token meets the pool's deposit policy\\n     * \\n     * @param tokenId Token to check pool eligibility for\\n     * \\n     * @return isEligible True if token meets policy and may be deposited. False otherwise.\\n     */\\n    function meetsPolicy(uint256 tokenId) external view returns (bool isEligible);\\n\\n    /**\\n     * @notice Get a pool's deposit policy for a given metadata version\\n     * \\n     * @param metadataVersion Version of metadata to return policy for\\n     * \\n     * @return policy Deposit policy for given metadata version\\n     */\\n\\tfunction policyForVersion(uint8 metadataVersion) external view returns (bytes memory policy);\\n}\\n\",\"keccak256\":\"0xb06812ab8b529196c9d7f6124d066b02fa50e6a1141235c6c4674819be134542\",\"license\":\"MIT\"},\"contracts/interfaces/jasmine/IRetireablePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title Jasmine Retireable Pool Interface\\n * @author Kai Aldag<kai.aldag@jasmine.energy>\\n * @notice Extends pools with retirement functionality and events.\\n * @custom:security-contact dev@jasmine.energy\\n */\\ninterface IJasmineRetireablePool {\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Events\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @notice emitted when tokens from a pool are retired\\n     * \\n     * @dev must be accompanied by a token burn event\\n     * \\n     * @param operator Initiator of retirement\\n     * @param beneficiary Designate beneficiary of retirement\\n     * @param quantity Number of JLT being retired\\n     */\\n    event Retirement(\\n        address indexed operator,\\n        address indexed beneficiary,\\n        uint256 quantity\\n    );\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Retirement Functionality\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @notice Burns 'quantity' of tokens from 'owner' in the name of 'beneficiary'.\\n     * \\n     * @dev Internally, calls are routed to Retirement Service to facilitate the retirement.\\n     * \\n     * @dev Emits a {Retirement} event.\\n     * \\n     * @dev Requirements:\\n     *     - msg.sender must be approved for owner's JLTs\\n     *     - Owner must have sufficient JLTs\\n     *     - Owner cannot be zero address\\n     * \\n     * @param from JLT owner from which to burn tokens\\n     * @param beneficiary Address to receive retirement acknowledgment. If none, assume msg.sender\\n     * @param amount Number of JLTs to withdraw\\n     * @param data Optional calldata to relay to retirement service via onERC1155Received\\n     * \\n     */\\n    function retire(\\n        address from, \\n        address beneficiary, \\n        uint256 amount, \\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Cost of retiring JLTs from pool.\\n     * \\n     * @param amount Amount of JLTs to retire.\\n     * \\n     * @return cost Price of retiring in JLTs.\\n     */\\n    function retirementCost(uint256 amount) external view returns (uint256 cost);\\n}\\n\",\"keccak256\":\"0xb458b4c4146f61c2e1addb3226eb16b9438fcac62882eea77c21a2d0944379f9\",\"license\":\"MIT\"},\"contracts/utilities/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.20;\\n\\nlibrary BytesLib {\\n    \\n    function toBytes32(address addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(addr)) << 96);\\n    }\\n\\n    function toAddress(bytes32 b) internal pure returns (address) {\\n        return address(uint160(uint256(b)));\\n    }\\n}\\n\",\"keccak256\":\"0xdbb1397224dd4e272b8ed3fc17b5d7307b01a5a62b4f08d85d5633781fcbddc4\",\"license\":\"BUSL-1.1\"},\"contracts/utilities/MessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.20;\\n\\nlibrary MessageLib {\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Errors\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    error InvalidMessageType(bytes1 operationByte);\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Constants\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    enum MessageType {\\n        TRANSFER,\\n        RETIREMENT,\\n        WITHDRAW_ANY,\\n        WITHDRAW_SPECIFIC\\n    }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Encoding Functions\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    function _encodeTransferMessage(address recipient, uint256 amount) internal pure returns (bytes memory message) {\\n        return abi.encodePacked(MessageType.TRANSFER, recipient, amount);\\n    }\\n\\n    function _encodeRetirementMessage(address beneficiary, uint256 amount, bytes calldata data) internal pure returns (bytes memory message) {\\n        return abi.encodePacked(MessageType.RETIREMENT, beneficiary, amount, data);\\n    }\\n\\n    function _encodeWithdrawAnyMessage(address recipient, uint256 amount) internal pure returns (bytes memory message) {\\n        return abi.encodePacked(MessageType.WITHDRAW_ANY, recipient, amount);\\n    }\\n\\n    // function _encodeWithdrawSpecificMessage(address recipient, uint256 amount, uint256[] calldata tokenIds) internal pure returns (bytes memory message) {\\n    //     return abi.encodePacked(MessageType.WITHDRAW_SPECIFIC, recipient, amount, tokenIds);\\n    // }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Decoding Functions\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    function _decodeMessageType(bytes calldata message) internal pure returns (bool isValidType, MessageType messageType) {\\n        isValidType = uint8(type(MessageType).max) >= uint8(message[0]);\\n        if (isValidType) messageType = MessageType(uint8(message[0]));\\n    }\\n\\n    function _decodeTransferMessage(bytes calldata message) internal pure returns (address recipient, uint256 amount) {\\n        recipient = abi.decode(message[1:33], (address));\\n        amount = abi.decode(message[33:], (uint256));\\n    }\\n\\n    function _decodeRetirementMessage(bytes calldata message) internal pure returns (address beneficiary, uint256 amount, bytes memory data) {\\n        beneficiary = abi.decode(message[1:33], (address));\\n        amount = abi.decode(message[33:65], (uint256));\\n        data = abi.decode(message[65:], (bytes));\\n    }\\n\\n    function _decodeWithdrawAnyMessage(bytes calldata message) internal pure returns (address recipient, uint256 amount) {\\n        recipient = abi.decode(message[1:33], (address));\\n        amount = abi.decode(message[33:], (uint256));\\n    }\\n}\\n\",\"keccak256\":\"0x7e37a2d3e5e49e5d86a24dc966ff3bc8db7341d4b6fb0f59e0cd9275da9835cf\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a03461013557613bb1906001600160401b03601f38849003908101601f191683019082821184831017610117578084916040968794855283398101031261013557602061004c83610150565b926001600160a01b039182916100629101610150565b16928315610139575f80546001600160a01b03198116861782558591908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3169182608052823b15610135575f92602484928651958693849263ca5eb5e160e01b845260048401525af1801561012b57610108575b8251613a4c90816101658239608051818181610218015281816103d8015281816107630152610aec0152f35b81116101175781525f806100dc565b634e487b7160e01b5f52604160045260245ffd5b83513d5f823e3d90fd5b5f80fd5b8451631e4fbdf760e01b81525f6004820152602490fd5b51906001600160a01b03821682036101355756fe6080604052600436101562000012575f80fd5b5f3560e01c806313137d65146200013457806317442b70146200012e5780632532096714620001285780633400288b14620001225780635e280f11146200011c5780636caa4fd11462000116578063715018a614620001105780637d25a05e146200010a57806382413eac14620001045780638da5cb5b14620000fe578063acf461f914620000f8578063bb0b6a5314620000f2578063ca5eb5e114620000ec578063e5711ffc14620000e6578063f2fde38b14620000e05763ff7bd03d14620000da575f80fd5b6200088b565b620007fa565b620007bd565b62000731565b620006f4565b620005b7565b6200058e565b62000527565b620004fd565b620004a2565b62000407565b620003c1565b62000335565b620002d9565b620002b6565b620001af565b60609060031901126200014c57600490565b5f80fd5b9181601f840112156200014c5782359167ffffffffffffffff83116200014c57602083818601950101116200014c57565b60a435906001600160a01b03821682036200014c57565b600435906001600160a01b03821682036200014c57565b60e03660031901126200014c57620001c7366200013a565b67ffffffffffffffff6084358181116200014c57620001eb90369060040162000150565b5050620001f762000181565b5060c4359081116200014c576200021390369060040162000150565b5050337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316036200029e576200025b6200025582620008d5565b6200095e565b9060208101358092036200026b57005b6200027690620008d5565b60405163309afaf360e21b815263ffffffff9190911660048201526024810191909152604490fd5b6040516391ac5e4f60e01b8152336004820152602490fd5b346200014c575f3660031901126200014c57604080516001815260026020820152f35b346200014c5760203660031901126200014c576020620003146bffffffffffffffffffffffff196200030a62000198565b60601b1662000995565b6040516001600160a01b039091168152f35b63ffffffff8116036200014c57565b346200014c5760403660031901126200014c577f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b600435620003778162000326565b602435906200038562000a50565b63ffffffff81165f5260016020528160405f2055620003bc604051928392836020909392919363ffffffff60408201951681520152565b0390a1005b346200014c575f3660031901126200014c576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346200014c575f60603660031901126200014c576200042562000198565b60243590620004348262000326565b6200043e62000a50565b6001600160a01b0316803b156200014c57604051633400288b60e01b815263ffffffff9290921660048301526044803560248401525f91839190829084905af180156200049c576200048e575080f35b6200049a9150620008f8565b005b62000953565b346200014c575f3660031901126200014c57620004be62000a50565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346200014c5760403660031901126200014c576200051d60043562000326565b60206040515f8152f35b346200014c5760a03660031901126200014c5762000545366200013a565b5060643567ffffffffffffffff81116200014c576200056990369060040162000150565b50506084356001600160a01b038116908190036200014c576020906040519030148152f35b346200014c575f3660031901126200014c575f546040516001600160a01b039091168152602090f35b346200014c5760203660031901126200014c57620005d462000198565b620005de62000a50565b6001600160a01b038181165f818152600260205260409020549092908216620006b1576200064f6200066e82620006366200061d620006ad9562000aa7565b6bffffffffffffffffffffffff198360601b1662000bce565b92839160018060a01b03165f52600260205260405f2090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6040519384938216907f7b266fdd82702074c05cddea1ec07dae2db6a870c274ca3166f3ae1f7dfe52745f80a36001600160a01b031682526020820190565b0390f35b6001600160a01b038181165f908152600260205260409020541660405163738f6e4f60e11b81526001600160a01b03928316600482015291166024820152604490fd5b346200014c5760203660031901126200014c5763ffffffff6004356200071a8162000326565b165f526001602052602060405f2054604051908152f35b346200014c575f60203660031901126200014c576200074f62000198565b6200075962000a50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190823b156200014c5760245f9283604051958694859363ca5eb5e160e01b85521660048401525af180156200049c576200048e575080f35b346200014c5760203660031901126200014c5760206001600160a01b0380620007e562000198565b165f526002825260405f205416604051908152f35b346200014c5760203660031901126200014c576200081762000198565b6200082162000a50565b6001600160a01b0390811690811562000873575f54826bffffffffffffffffffffffff60a01b8216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b604051631e4fbdf760e01b81525f6004820152602490fd5b346200014c5760603660031901126200014c576020620008ab366200013a565b63ffffffff8135620008bd8162000326565b165f526001825260405f205482604051920135148152f35b35620008e18162000326565b90565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff81116200090d57604052565b620008e4565b6080810190811067ffffffffffffffff8211176200090d57604052565b90601f8019910116810190811067ffffffffffffffff8211176200090d57604052565b6040513d5f823e3d90fd5b63ffffffff16805f52600160205260405f20549081156200097d575090565b6024906040519063f6ff4fb760e01b82526004820152fd5b604051602081019160ff60f81b83523060601b602183015260358201527f21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f605582015260558152620009e78162000913565b519020604080516135a560f21b6020820190815260609390931b6bffffffffffffffffffffffff19166022820152600160f81b6036820152601781529081019167ffffffffffffffff8311828410176200090d576040929092525190206001600160a01b031690565b5f546001600160a01b0316330362000a6457565b60405163118cdaa760e01b8152336004820152602490fd5b908151915f5b83811062000a93575050015f815290565b806020809284010151818501520162000a82565b620008e162000b379162000b3e612da6916040519262000acb602082018562000930565b80845262000c7160208501396040519060018060a01b0380911660208301527f00000000000000000000000000000000000000000000000000000000000000001660408201523060608201526060815262000b268162000913565b604051948593602085019062000a7c565b9062000a7c565b03601f19810183528262000930565b604051906040820182811067ffffffffffffffff8211176200090d57604052601082526f67363d3d37363d34f03d5260086018f360801b6020830152565b3d1562000bc9573d9067ffffffffffffffff82116200090d576040519162000bbe601f8201601f19166020018462000930565b82523d5f602084013e565b606090565b919062000bda62000b4d565b9262000be68162000995565b93843b62000c5e576020815191015ff56001600160a01b0381161562000c4c57815f92918360208194519301915af162000c1f62000b8b565b5015801562000c42575b62000c3057565b6040516353de54b960e01b8152600490fd5b50813b1562000c29565b60405163bbd2fe8760e01b8152600490fd5b60405163cd43efa160e01b8152600490fdfe60e06040908082523462000259575f60608262002da68038038091620000268285620002c2565b83398101031262000259576200003c82620002fa565b9062000058846200005060208601620002fa565b9401620002fa565b845163313ce56760e01b81526001600160a01b0393841694600494919290919060208487818a5afa938415620002b8575f9462000273575b5081169182156200025d575f80546001600160a01b03198116851782558491908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3169081608052813b1562000259575f91602483928951948593849263ca5eb5e160e01b84528a8401525af180156200024f576200021e575b5060ff16600681106200020e576005190160ff8111620001fb5760ff1691604d8311620001e8575050600a0a60a05260c05251612a9690816200031082396080518181816107550152818161083301528181610a4901528181610bc301528181610c190152818161166c015281816118680152611ad6015260a0518181816103b9015281816105fc01528181610927015281816114a6015281816117b701528181611d3e0152612627015260c0518181816101fa015281816104880152818161065b0152818161096a015281816119b30152611c320152f35b634e487b7160e01b825260119052602490fd5b506011602492634e487b7160e01b835252fd5b84516301e9714b60e41b81528390fd5b9091506001600160401b0381116200023c5784525f9060ff6200010f565b604183634e487b7160e01b5f525260245ffd5b86513d5f823e3d90fd5b5f80fd5b8751631e4fbdf760e01b81525f81880152602490fd5b9093506020813d602011620002af575b816200029260209383620002c2565b8101031262000259575160ff811681036200025957928162000090565b3d915062000283565b88513d5f823e3d90fd5b601f909101601f19168101906001600160401b03821190821017620002e657604052565b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b0382168203620002595756fe6080806040526004361015610012575f80fd5b5f9060e05f35811c9182630d35b41514611f4f57508163111ecdad14611f2757816313137d6514611abd578163134d4f2514611aa2578163156a0d0f14611a7c57816317442b7014611a5b5781631f5e133414611a4057816329dc1467146119805781633400288b146119115781633b6f743b1461174657816352ae28791461172b5781635535d461146116de5781635a0dfe4d1461169b5781635e280f11146116565781636fc1b31e146115e8578163715018a61461158f5781637d25a05e1461156957816382413eac1461150c578163857749b0146114f05781638da5cb5b146114c9578163963efcaa1461148e5781639f68b96414611472578163ac9650d8146112fe578163b731ea0a146112d5578163b98bd07014611007578163bb0b6a5314610fd2578163bc70b35414610f68578163bd815db014610cf1578163c7c7f5b3146108a9578163ca5eb5e114610806578163d045a0dc1461032457508063d4243885146102b6578063f2fde38b14610229578063fc0c546a146101e45763ff7bd03d146101a1575f80fd5b346101e15760603660031901126101e15760043563ffffffff81168091036101dd57816040916020935260018352205460405190602435148152f35b5f80fd5b80fd5b50346101e157806003193601126101e1576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101e15760203660031901126101e157610243612120565b61024b6125d3565b6001600160a01b0390811690811561029d575f54826bffffffffffffffffffffffff60a01b8216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b50346101e15760203660031901126101e1577fd48d879cef83a1c0bdda516f27b13ddb1b3f8bbac1c9e1511bb2a659c242776060206102f3612120565b6102fb6125d3565b600280546001600160a01b0319166001600160a01b03929092169182179055604051908152a180f35b905061032f36612136565b9396909150949193943033036107f457831590816105c85750805f9161056d5782359160ff60f81b83169260f81c806003109081156105b2575b50610595576004811015610581578061040d575b5050505061038b91506123c8565b92816020116101dd576103df6103af5f80516020612a418339815191529383612918565b6001600160401b037f000000000000000000000000000000000000000000000000000000000000000091166128f1565b6040805163ffffffff9096168652602086019190915290356001600160a01b03169390819081015b0390a380f35b6001810361052857505050826021116101dd576001600160a01b0392600182013584811691908290036101dd57806041116101dd578201602083820360401901126101dd5760418301356001600160401b0381116101dd57830190806060830112156101dd57816061604161048594013591016123f4565b937f000000000000000000000000000000000000000000000000000000000000000016803b156101dd575f92836021936104ef6040519889968795869463fd40baaf60e01b86523060048701526024860152013560448401526080606484015260848301906120ce565b03925af191821561051d5761038b9261050e575b505b5f80808061037d565b6105179061223f565b5f610503565b6040513d5f823e3d90fd5b8092949550600291935003610544575b50505061038b90610505565b6003036105515780610538565b61056d5760249060405190637b5f85ed60e11b82526004820152fd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52602160045260245ffd5b5061056d5760249060405190637b5f85ed60e11b82526004820152fd5b925090505f91600481101561058157905f610369565b9493505050816020116101dd576001600160a01b0385358116956105ec8482612918565b936106226001600160401b0395867f000000000000000000000000000000000000000000000000000000000000000091166128f1565b9461062c856123c8565b5061067f60405163a9059cbb60e01b60208201528a602482015287604482015260448152610659816122a3565b7f00000000000000000000000000000000000000000000000000000000000000006129cf565b602882116106c5575b505050505f80516020612a4183398151915292506106a5906123c8565b6040805163ffffffff909216825260208201929092529081908101610407565b604085013590811681036101dd576106dc856123c8565b96826028116101dd576106fe604c9361075395602836926027190191016123f4565b906040519889936001600160401b0360c01b9060c01b16602085015263ffffffff60e01b911b16602883015286602c83015261074381518092602086860191016120ad565b810103602c8101875201856122be565b7f000000000000000000000000000000000000000000000000000000000000000016803b156101dd576107ba5f94918592604051968780948193633e5ac80960e11b83528c60048401528b60248401528360448401526080606484015260848301906120ce565b03925af190811561051d575f80516020612a41833981519152936106a5926107e5575b819281610688565b6107ee9061223f565b5f6107dd565b60405163029a949d60e31b8152600490fd5b82346101e15760203660031901126101e15780610821612120565b6108296125d3565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190823b156108a4576024849283604051958694859363ca5eb5e160e01b85521660048401525af18015610899576108895750f35b6108929061223f565b6101e15780f35b6040513d84823e3d90fd5b505050fd5b8260031991608083360112610b9157600435926001600160401b038411610ced5783360301126101e15760403660231901126101e1576064356001600160a01b03811690036101dd576108fa61256b565b505f602060405161090a81612210565b8281520152606482013591610921816004016123c8565b506109597f00000000000000000000000000000000000000000000000000000000000000006109548160448501356128d3565b6128f1565b92808410610ccf575061098e8330337f000000000000000000000000000000000000000000000000000000000000000061298d565b61099b8382600401612616565b6109aa836004969396016123c8565b906040516109b781612210565b602435815260443560208201526109cc61256b565b50805191823403610cb757602082015180610ba8575b5090839291610a459860206109f860809761259d565b93015115159263ffffffff60405196610a1088612252565b1686526020860152604085015260608401528383015260405180809881946302637a4560e41b835260643590600484016127d7565b03917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1928315610b9c578093610b24575b5060c0935060405190610a9382612210565b8082526020820192818452610aac8551916004016123c8565b9163ffffffff6040519316835280602084015260408301527f85496b760a4b7f8d66384b9df21b381f5d1b1e79f229a47aaf4c232edc2fe59a60603393a360206040805194805186526001600160401b03838201511683870152015180516040860152015160608401525160808301525160a0820152f35b90925060803d608011610b95575b610b3c81866122be565b840193608081860312610b915760405191610b568361226d565b815183526020820151906001600160401b03821682036101e15750602083015260c094610b85916040016127af565b60408201529184610a81565b5080fd5b503d610b32565b604051903d90823e3d90fd5b60405163393f876560e21b81529094939291906020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610cac578991610c66575b506001600160a01b0316988915610c5457610a4599608096610c49917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690339061298d565b9850909192936109e2565b6040516329b99a9560e11b8152600490fd5b90506020813d602011610ca4575b81610c81602093836122be565b81010312610ca057516001600160a01b0381168103610ca0578a610bfb565b8880fd5b3d9150610c74565b6040513d8b823e3d90fd5b6040516304fb820960e51b8152346004820152602490fd5b83604491604051916371c4efed60e01b835260048301526024820152fd5b8280fd5b82602090600319928284360112610b91576001600160401b0393600435858111610f6457610d23903690600401612381565b9290845b848110610e0257604051638e9e709960e01b815288908890888082600481335afa938415610df5578194610d7f575b505050610d7b604051928392638351eea760e01b8452600484015260248301906120ce565b0390fd5b90919293503d8083853e610d9381856122be565b8301928481850312610ced578051918211610ced570182601f82011215610b9157805191610dc0836123d9565b93610dce60405195866122be565b8385528584840101116101e1575090610dec918480850191016120ad565b90828080610d56565b50604051903d90823e3d90fd5b8060051b82013561013e1983360301811215610f60578201610e23816123c8565b90610e4389820135809363ffffffff165f52600160205260405f20541490565b15610f5657610e5661010082018261242a565b868301356001600160a01b038116929190839003610f5257610e7c61012085018561242a565b929091303b15610f4e57604051633411683760e21b8152968f9063ffffffff610ea4896121b6565b1660048a015260248901526040870135908116809103610f4a5787958e979587958e610ef28f97899760c099610f069860448b015260a08d013560648b015260848a015260e4890191612470565b9360a48701528584030160c4860152612470565b03920135305af18015610f3f57908791610f27575b50506001905b01610d27565b610f309061223f565b610f3b578589610f1b565b8580fd5b6040513d89823e3d90fd5b8d80fd5b8c80fd5b8a80fd5b5050600190610f21565b8680fd5b8380fd5b82346101e15760603660031901126101e157610f826121a3565b610f8a6121c7565b91604435906001600160401b0382116101e157610fce610fba8585610fb236600488016120f3565b929091612490565b6040519182916020835260208301906120ce565b0390f35b82346101e15760203660031901126101e157604060209163ffffffff610ff66121a3565b168152600183522054604051908152f35b82346101e157602080600319360112610b91576001600160401b03600435818111610f64579161103c84933690600401612381565b9290916110476125d3565b845b84811061113e5750604051938082860183875252604085019160408260051b87010194809488915b8483106110a257897fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b6748a8a038ba180f35b90919293949596603f198982030187528735605e1983360301811215610f5257820160609063ffffffff6110d5826121b6565b1683528681013561ffff81168091036101dd57878401526040810135601e1982360301811215610f4e570190868235920192858311610f4e578236038413610f4e57600193889383838695604061112f9601520191612470565b99019701959493019190611071565b949361116361115d6111538884889698612874565b604081019061242a565b90612896565b611171611153878385612874565b63ffffffff61118c6111878a86889c969c612874565b6123c8565b1687526003865260408720866111a3848688612874565b013561ffff8116809103610ca0575f52865260405f20908581116112c1576111cb82546121d8565b601f90818111611281575b508890821160011461121d578190899a6001969798999a92611212575b50505f19600383901b1c191690841b1790555b01939093929192611049565b013590508a806111f3565b601f19821699838a52888a20918a5b8c811061126a57508360019798999a9b9c10611251575b505050831b83019055611206565b01355f19600384901b60f8161c19169055898080611243565b90928a60018192868601358155019401910161122c565b838a52888a208280850160051c8201928b86106112b8575b0160051c01905b8181106112ad57506111d6565b8a81556001016112a0565b92508192611299565b634e487b7160e01b88526041600452602488fd5b82346101e157806003193601126101e1576002546040516001600160a01b039091168152602090f35b82346101e157602080600319360112610b91576004356001600160401b038111610ced5761133183913690600401612381565b60405161133d81612288565b8381528481019061134d836123b1565b9361135b60405195866122be565b838552611367846123b1565b601f1901865b818110611463575050855b8481106113de5787878760405191838301848452825180915260408401948060408360051b870101940192955b8287106113b25785850386f35b9091929382806113ce600193603f198a820301865288516120ce565b96019201960195929190926113a5565b8061144488808b6114246114306113ff9d9e9d60019860051b8a018a61242a565b8b8d60409693965195838794868601998a37840191858301938a8552519384916120ad565b010380845201826122be565b5190305af461143d612845565b903061292a565b61144e828961245c565b52611459818861245c565b5001969596611378565b60608782018a0152880161136d565b82346101e157806003193601126101e157602060405160018152f35b82346101e157806003193601126101e15760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b82346101e157806003193601126101e157546040516001600160a01b039091168152602090f35b82346101e157806003193601126101e157602060405160068152f35b82346101e157366003190160a08112610b91576060136101e1576064356001600160401b038111610b91576115459036906004016120f3565b50506084356001600160a01b038116908190036101dd576020906040519030148152f35b82346101e15760403660031901126101e1576020906115866121a3565b50604051908152f35b82346101e157806003193601126101e1576115a86125d3565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b82346101e15760203660031901126101e1577ff0be4f1e87349231d80c36b33f9e8639658eeaf474014dee15a3e6a4d44141976020611625612120565b61162d6125d3565b600480546001600160a01b0319166001600160a01b03929092169182179055604051908152a180f35b82346101e157806003193601126101e1576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b82346101e15760403660031901126101e15760206116d46116ba6121a3565b6024359063ffffffff165f52600160205260405f20541490565b6040519015158152f35b82346101e15760403660031901126101e15761ffff60406116fd6121a3565b9263ffffffff61170b6121c7565b9416815260036020522091165f52602052610fce610fba60405f206122df565b82346101e157806003193601126101e1576020604051308152f35b905034610b915760031990604036830112610ced57600435906001600160401b038211610f645781600401928236030112610ced5760243590811515809203610f64575f602060405161179881612210565b82815201526117e060446109546064840135936117b4876123c8565b507f000000000000000000000000000000000000000000000000000000000000000092839101356128d3565b908082106118f35750916040916118056117fd6118649584612616565b9190936123c8565b925f6020865161181481612210565b82815201526118228461259d565b63ffffffff86519561183387612252565b16855260208501528484015260608301526080820152815180938192631bb8518b60e31b83523090600484016127d7565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156108995782916118b5575b60408260208251918051835201516020820152f35b905060403d6040116118ec575b6118cc81836122be565b8101916040828403126101e157506040916118e6916127af565b5f6118a0565b503d6118c2565b60449250604051916371c4efed60e01b835260048301526024820152fd5b82346101e15760403660031901126101e1577f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b61194c6121a3565b602435906119586125d3565b63ffffffff16808452600160209081526040808620849055805192835290820192909252a180f35b82346101dd5760c03660031901126101dd5761199a612120565b6064359060ff82168092036101dd576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116803b156101dd575f928360e492604051968795869463d505accf60e01b865216600485015230602485015260243560448501526044356064850152608484015260843560a484015260a43560c48401525af1801561051d57611a34575080f35b611a3e915061223f565b005b346101dd575f3660031901126101dd57602060405160018152f35b346101dd575f3660031901126101dd57604080516001815260026020820152f35b346101dd575f3660031901126101dd576040805162b9270b60e21b815260016020820152f35b346101dd575f3660031901126101dd57602060405160028152f35b611ac636612136565b949592946001600160a01b0394937f00000000000000000000000000000000000000000000000000000000000000008616935091338403611f0f57611b12611b0d846123c8565b61259d565b986020998a850135809103611ede575082159485611d11575050835f9461056d5781359060ff60f81b82169160f81c80600310908115611cfb575b5061055157600486101561058157858996611bbc575b5050505050611b71906123c8565b95116101dd57611bb7611b956103af5f80516020612a418339815191529584612918565b604051938493351696836020909392919363ffffffff60408201951681520152565b0390a3005b9395929360018103611cca5750505050826021116101dd576001810135928584168094036101dd57806041116101dd5781018860401983830301126101dd5760418201356001600160401b0381116101dd57820190806060830112156101dd578160616041611c2e94013591016123f4565b92857f000000000000000000000000000000000000000000000000000000000000000016803b156101dd575f9283602193611c996040519889968795869463fd40baaf60e01b86523060048701526024860152013560448401526080606484015260848301906120ce565b03925af190811561051d578592611b7192611cbb575b505b9088808080611b63565b611cc49061223f565b88611caf565b6002919396508092945003611ce6575b505050611b7190611cb1565b60039192939450036105515780869392611cda565b915095505f90600481101561058157958c611b4d565b9450959150508588929498116101dd5787351696611d2f8682612918565b611d646001600160401b0391827f000000000000000000000000000000000000000000000000000000000000000091166128f1565b95611d6e866123c8565b50611d9a60405163a9059cbb60e01b868201528b602482015288604482015260448152610659816122a3565b60288811611de1575b50505050505f80516020612a418339815191529250611dc1906123c8565b6040805163ffffffff909216825260208201929092529081908101611bb7565b604086013591821682036101dd57611df8866123c8565b97806028116101dd57611e5e94611e1e61074392604c96602836926027190191016123f4565b926040519a8b956001600160401b0360c01b9060c01b168387015263ffffffff60e01b911b16602885015288602c850152825192839186860191016120ad565b803b156101dd57611ea35f94918592604051968780948193633e5ac80960e11b83528c60048401528b60248401528360448401526080606484015260848301906120ce565b03925af190811561051d575f80516020612a4183398151915293611dc192611ecf575b81928180611da3565b611ed89061223f565b86611ec6565b611ee7856123c8565b60405163309afaf360e21b815263ffffffff9190911660048201526024810191909152604490fd5b6040516391ac5e4f60e01b8152336004820152602490fd5b346101dd575f3660031901126101dd576004546040516001600160a01b039091168152602090f35b346101dd576020916003199183833601126101dd57600435916001600160401b03938484116101dd5783360301126101dd578381611f8d5f93612210565b82815201525f83604051611fa081612210565b828152015260405190611fb282612210565b5f825283820192835260405191611fc883612288565b5f8352611fe560446109546064850135946117b4816004016123c8565b9180831061208f57509360405194611ffc86612210565b8286528186019283526040519460a0860191518652518286015260a06040860152835180915260c08501918060c08360051b8801019501925f905b83821061205257885160608901528551608089015287870388f35b9091929395838061208060019360bf198c82030186526040838c5180518452015191818582015201906120ce565b98019201920190939291612037565b82604491604051916371c4efed60e01b835260048301526024820152fd5b5f5b8381106120be5750505f910152565b81810151838201526020016120af565b906020916120e7815180928185528580860191016120ad565b601f01601f1916010190565b9181601f840112156101dd578235916001600160401b0383116101dd57602083818601950101116101dd57565b600435906001600160a01b03821682036101dd57565b600319810160e081126101dd576060136101dd57600491606435916001600160401b03906084358281116101dd5781612171916004016120f3565b9093909260a4356001600160a01b03811681036101dd579260c4359182116101dd5761219f916004016120f3565b9091565b6004359063ffffffff821682036101dd57565b359063ffffffff821682036101dd57565b6024359061ffff821682036101dd57565b90600182811c92168015612206575b60208310146121f257565b634e487b7160e01b5f52602260045260245ffd5b91607f16916121e7565b604081019081106001600160401b0382111761222b57604052565b634e487b7160e01b5f52604160045260245ffd5b6001600160401b03811161222b57604052565b60a081019081106001600160401b0382111761222b57604052565b606081019081106001600160401b0382111761222b57604052565b602081019081106001600160401b0382111761222b57604052565b608081019081106001600160401b0382111761222b57604052565b90601f801991011681019081106001600160401b0382111761222b57604052565b9060405191825f82546122f1816121d8565b908184526020946001916001811690815f1461235f5750600114612321575b50505061231f925003836122be565b565b5f90815285812095935091905b81831061234757505061231f93508201015f8080612310565b8554888401850152948501948794509183019161232e565b9250505061231f94925060ff191682840152151560051b8201015f8080612310565b9181601f840112156101dd578235916001600160401b0383116101dd576020808501948460051b0101116101dd57565b6001600160401b03811161222b5760051b60200190565b3563ffffffff811681036101dd5790565b6001600160401b03811161222b57601f01601f191660200190565b929192612400826123d9565b9161240e60405193846122be565b8294818452818301116101dd578281602093845f960137010152565b903590601e19813603018212156101dd57018035906001600160401b0382116101dd576020019181360383136101dd57565b805182101561056d5760209160051b010190565b908060209392818452848401375f828201840152601f01601f1916010190565b63ffffffff9094919394165f526020926003845261ffff60405f2091165f5283526124bd60405f206122df565b80511561255d5784156125565760028510156124f8575050610d7b90604051938493639a6d49cd60e01b855260048501526024840191612470565b91926125078585969396612896565b816002116101dd5761255392601e9260011992604051968361253289955180928580890191016120ad565b8401916002868501920190830137015f8482015203908101845201826122be565b90565b9350915050565b5092612553925036916123f4565b604051906125788261226d565b815f81525f6020820152604080519161259083612210565b5f83525f60208401520152565b63ffffffff16805f52600160205260405f20549081156125bb575090565b6024906040519063f6ff4fb760e01b82526004820152fd5b5f546001600160a01b031633036125e657565b60405163118cdaa760e01b8152336004820152602490fd5b908160209103126101dd575180151581036101dd5790565b909160206126e261264c82850135957f0000000000000000000000000000000000000000000000000000000000000000906128d3565b61266361265c60a087018761242a565b36916123f4565b805115801597919061277d576126bd91606891604051948592888401526001600160401b0360c01b9060c01b1660408301523360488301526126ad815180928986860191016120ad565b81010360488101845201826122be565b935b84955f14612775576002905b610fb26126d7826123c8565b91608081019061242a565b6004549093906001600160a01b0316806126fb57505050565b612728839161273a9360405180958194829363043a78eb60e01b84526040600485015260448401906120ce565b8281036003190160248401528a6120ce565b03915afa801561051d5761274c575050565b8161276b92903d1061276e575b61276381836122be565b8101906125fe565b50565b503d612759565b6001906126cb565b509060405191848301526001600160401b0360c01b9060c01b166040820152602881526127a98161226d565b936126bf565b91908260409103126101dd576040516127c781612210565b6020808294805184520151910152565b906020909392936040835263ffffffff8151166040840152818101516060840152608061282b612815604084015160a08488015260e08701906120ce565b6060840151868203603f190160a08801526120ce565b910151151560c08401526001600160a01b03909416910152565b3d1561286f573d90612856826123d9565b9161286460405193846122be565b82523d5f602084013e565b606090565b919081101561056d5760051b81013590605e19813603018212156101dd570190565b90806002116101dd576003823560f01c036128af575050565b610d7b604051928392639a6d49cd60e01b8452602060048501526024840191612470565b81156128dd570490565b634e487b7160e01b5f52601260045260245ffd5b8181029291811591840414171561290457565b634e487b7160e01b5f52601160045260245ffd5b906028116101dd576020013560c01c90565b90612951575080511561293f57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580612984575b612962575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561295a565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815261231f916129cf82612252565b5f806129f79260018060a01b03169360208151910182865af16129f0612845565b908361292a565b8051908115159182612a25575b5050612a0d5750565b60249060405190635274afe760e01b82526004820152fd5b612a3892506020809183010191016125fe565b155f80612a0456feefed6d3500546b29533b128a29e3a94d70788727f0507505ac12eaf2e578fd9ca26469706673582212206875ba61ff8d41e5d3c0f000fc71f5d742d993382def0fea53a2542dd60c461264736f6c63430008180033a2646970667358221220ee9c166d964c760e929a813d7bac6ef28e9e636cfe5eeda587c3c5abea5b788264736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436101562000012575f80fd5b5f3560e01c806313137d65146200013457806317442b70146200012e5780632532096714620001285780633400288b14620001225780635e280f11146200011c5780636caa4fd11462000116578063715018a614620001105780637d25a05e146200010a57806382413eac14620001045780638da5cb5b14620000fe578063acf461f914620000f8578063bb0b6a5314620000f2578063ca5eb5e114620000ec578063e5711ffc14620000e6578063f2fde38b14620000e05763ff7bd03d14620000da575f80fd5b6200088b565b620007fa565b620007bd565b62000731565b620006f4565b620005b7565b6200058e565b62000527565b620004fd565b620004a2565b62000407565b620003c1565b62000335565b620002d9565b620002b6565b620001af565b60609060031901126200014c57600490565b5f80fd5b9181601f840112156200014c5782359167ffffffffffffffff83116200014c57602083818601950101116200014c57565b60a435906001600160a01b03821682036200014c57565b600435906001600160a01b03821682036200014c57565b60e03660031901126200014c57620001c7366200013a565b67ffffffffffffffff6084358181116200014c57620001eb90369060040162000150565b5050620001f762000181565b5060c4359081116200014c576200021390369060040162000150565b5050337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316036200029e576200025b6200025582620008d5565b6200095e565b9060208101358092036200026b57005b6200027690620008d5565b60405163309afaf360e21b815263ffffffff9190911660048201526024810191909152604490fd5b6040516391ac5e4f60e01b8152336004820152602490fd5b346200014c575f3660031901126200014c57604080516001815260026020820152f35b346200014c5760203660031901126200014c576020620003146bffffffffffffffffffffffff196200030a62000198565b60601b1662000995565b6040516001600160a01b039091168152f35b63ffffffff8116036200014c57565b346200014c5760403660031901126200014c577f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b600435620003778162000326565b602435906200038562000a50565b63ffffffff81165f5260016020528160405f2055620003bc604051928392836020909392919363ffffffff60408201951681520152565b0390a1005b346200014c575f3660031901126200014c576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346200014c575f60603660031901126200014c576200042562000198565b60243590620004348262000326565b6200043e62000a50565b6001600160a01b0316803b156200014c57604051633400288b60e01b815263ffffffff9290921660048301526044803560248401525f91839190829084905af180156200049c576200048e575080f35b6200049a9150620008f8565b005b62000953565b346200014c575f3660031901126200014c57620004be62000a50565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346200014c5760403660031901126200014c576200051d60043562000326565b60206040515f8152f35b346200014c5760a03660031901126200014c5762000545366200013a565b5060643567ffffffffffffffff81116200014c576200056990369060040162000150565b50506084356001600160a01b038116908190036200014c576020906040519030148152f35b346200014c575f3660031901126200014c575f546040516001600160a01b039091168152602090f35b346200014c5760203660031901126200014c57620005d462000198565b620005de62000a50565b6001600160a01b038181165f818152600260205260409020549092908216620006b1576200064f6200066e82620006366200061d620006ad9562000aa7565b6bffffffffffffffffffffffff198360601b1662000bce565b92839160018060a01b03165f52600260205260405f2090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6040519384938216907f7b266fdd82702074c05cddea1ec07dae2db6a870c274ca3166f3ae1f7dfe52745f80a36001600160a01b031682526020820190565b0390f35b6001600160a01b038181165f908152600260205260409020541660405163738f6e4f60e11b81526001600160a01b03928316600482015291166024820152604490fd5b346200014c5760203660031901126200014c5763ffffffff6004356200071a8162000326565b165f526001602052602060405f2054604051908152f35b346200014c575f60203660031901126200014c576200074f62000198565b6200075962000a50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190823b156200014c5760245f9283604051958694859363ca5eb5e160e01b85521660048401525af180156200049c576200048e575080f35b346200014c5760203660031901126200014c5760206001600160a01b0380620007e562000198565b165f526002825260405f205416604051908152f35b346200014c5760203660031901126200014c576200081762000198565b6200082162000a50565b6001600160a01b0390811690811562000873575f54826bffffffffffffffffffffffff60a01b8216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b604051631e4fbdf760e01b81525f6004820152602490fd5b346200014c5760603660031901126200014c576020620008ab366200013a565b63ffffffff8135620008bd8162000326565b165f526001825260405f205482604051920135148152f35b35620008e18162000326565b90565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff81116200090d57604052565b620008e4565b6080810190811067ffffffffffffffff8211176200090d57604052565b90601f8019910116810190811067ffffffffffffffff8211176200090d57604052565b6040513d5f823e3d90fd5b63ffffffff16805f52600160205260405f20549081156200097d575090565b6024906040519063f6ff4fb760e01b82526004820152fd5b604051602081019160ff60f81b83523060601b602183015260358201527f21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f605582015260558152620009e78162000913565b519020604080516135a560f21b6020820190815260609390931b6bffffffffffffffffffffffff19166022820152600160f81b6036820152601781529081019167ffffffffffffffff8311828410176200090d576040929092525190206001600160a01b031690565b5f546001600160a01b0316330362000a6457565b60405163118cdaa760e01b8152336004820152602490fd5b908151915f5b83811062000a93575050015f815290565b806020809284010151818501520162000a82565b620008e162000b379162000b3e612da6916040519262000acb602082018562000930565b80845262000c7160208501396040519060018060a01b0380911660208301527f00000000000000000000000000000000000000000000000000000000000000001660408201523060608201526060815262000b268162000913565b604051948593602085019062000a7c565b9062000a7c565b03601f19810183528262000930565b604051906040820182811067ffffffffffffffff8211176200090d57604052601082526f67363d3d37363d34f03d5260086018f360801b6020830152565b3d1562000bc9573d9067ffffffffffffffff82116200090d576040519162000bbe601f8201601f19166020018462000930565b82523d5f602084013e565b606090565b919062000bda62000b4d565b9262000be68162000995565b93843b62000c5e576020815191015ff56001600160a01b0381161562000c4c57815f92918360208194519301915af162000c1f62000b8b565b5015801562000c42575b62000c3057565b6040516353de54b960e01b8152600490fd5b50813b1562000c29565b60405163bbd2fe8760e01b8152600490fd5b60405163cd43efa160e01b8152600490fdfe60e06040908082523462000259575f60608262002da68038038091620000268285620002c2565b83398101031262000259576200003c82620002fa565b9062000058846200005060208601620002fa565b9401620002fa565b845163313ce56760e01b81526001600160a01b0393841694600494919290919060208487818a5afa938415620002b8575f9462000273575b5081169182156200025d575f80546001600160a01b03198116851782558491908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3169081608052813b1562000259575f91602483928951948593849263ca5eb5e160e01b84528a8401525af180156200024f576200021e575b5060ff16600681106200020e576005190160ff8111620001fb5760ff1691604d8311620001e8575050600a0a60a05260c05251612a9690816200031082396080518181816107550152818161083301528181610a4901528181610bc301528181610c190152818161166c015281816118680152611ad6015260a0518181816103b9015281816105fc01528181610927015281816114a6015281816117b701528181611d3e0152612627015260c0518181816101fa015281816104880152818161065b0152818161096a015281816119b30152611c320152f35b634e487b7160e01b825260119052602490fd5b506011602492634e487b7160e01b835252fd5b84516301e9714b60e41b81528390fd5b9091506001600160401b0381116200023c5784525f9060ff6200010f565b604183634e487b7160e01b5f525260245ffd5b86513d5f823e3d90fd5b5f80fd5b8751631e4fbdf760e01b81525f81880152602490fd5b9093506020813d602011620002af575b816200029260209383620002c2565b8101031262000259575160ff811681036200025957928162000090565b3d915062000283565b88513d5f823e3d90fd5b601f909101601f19168101906001600160401b03821190821017620002e657604052565b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b0382168203620002595756fe6080806040526004361015610012575f80fd5b5f9060e05f35811c9182630d35b41514611f4f57508163111ecdad14611f2757816313137d6514611abd578163134d4f2514611aa2578163156a0d0f14611a7c57816317442b7014611a5b5781631f5e133414611a4057816329dc1467146119805781633400288b146119115781633b6f743b1461174657816352ae28791461172b5781635535d461146116de5781635a0dfe4d1461169b5781635e280f11146116565781636fc1b31e146115e8578163715018a61461158f5781637d25a05e1461156957816382413eac1461150c578163857749b0146114f05781638da5cb5b146114c9578163963efcaa1461148e5781639f68b96414611472578163ac9650d8146112fe578163b731ea0a146112d5578163b98bd07014611007578163bb0b6a5314610fd2578163bc70b35414610f68578163bd815db014610cf1578163c7c7f5b3146108a9578163ca5eb5e114610806578163d045a0dc1461032457508063d4243885146102b6578063f2fde38b14610229578063fc0c546a146101e45763ff7bd03d146101a1575f80fd5b346101e15760603660031901126101e15760043563ffffffff81168091036101dd57816040916020935260018352205460405190602435148152f35b5f80fd5b80fd5b50346101e157806003193601126101e1576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101e15760203660031901126101e157610243612120565b61024b6125d3565b6001600160a01b0390811690811561029d575f54826bffffffffffffffffffffffff60a01b8216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b50346101e15760203660031901126101e1577fd48d879cef83a1c0bdda516f27b13ddb1b3f8bbac1c9e1511bb2a659c242776060206102f3612120565b6102fb6125d3565b600280546001600160a01b0319166001600160a01b03929092169182179055604051908152a180f35b905061032f36612136565b9396909150949193943033036107f457831590816105c85750805f9161056d5782359160ff60f81b83169260f81c806003109081156105b2575b50610595576004811015610581578061040d575b5050505061038b91506123c8565b92816020116101dd576103df6103af5f80516020612a418339815191529383612918565b6001600160401b037f000000000000000000000000000000000000000000000000000000000000000091166128f1565b6040805163ffffffff9096168652602086019190915290356001600160a01b03169390819081015b0390a380f35b6001810361052857505050826021116101dd576001600160a01b0392600182013584811691908290036101dd57806041116101dd578201602083820360401901126101dd5760418301356001600160401b0381116101dd57830190806060830112156101dd57816061604161048594013591016123f4565b937f000000000000000000000000000000000000000000000000000000000000000016803b156101dd575f92836021936104ef6040519889968795869463fd40baaf60e01b86523060048701526024860152013560448401526080606484015260848301906120ce565b03925af191821561051d5761038b9261050e575b505b5f80808061037d565b6105179061223f565b5f610503565b6040513d5f823e3d90fd5b8092949550600291935003610544575b50505061038b90610505565b6003036105515780610538565b61056d5760249060405190637b5f85ed60e11b82526004820152fd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52602160045260245ffd5b5061056d5760249060405190637b5f85ed60e11b82526004820152fd5b925090505f91600481101561058157905f610369565b9493505050816020116101dd576001600160a01b0385358116956105ec8482612918565b936106226001600160401b0395867f000000000000000000000000000000000000000000000000000000000000000091166128f1565b9461062c856123c8565b5061067f60405163a9059cbb60e01b60208201528a602482015287604482015260448152610659816122a3565b7f00000000000000000000000000000000000000000000000000000000000000006129cf565b602882116106c5575b505050505f80516020612a4183398151915292506106a5906123c8565b6040805163ffffffff909216825260208201929092529081908101610407565b604085013590811681036101dd576106dc856123c8565b96826028116101dd576106fe604c9361075395602836926027190191016123f4565b906040519889936001600160401b0360c01b9060c01b16602085015263ffffffff60e01b911b16602883015286602c83015261074381518092602086860191016120ad565b810103602c8101875201856122be565b7f000000000000000000000000000000000000000000000000000000000000000016803b156101dd576107ba5f94918592604051968780948193633e5ac80960e11b83528c60048401528b60248401528360448401526080606484015260848301906120ce565b03925af190811561051d575f80516020612a41833981519152936106a5926107e5575b819281610688565b6107ee9061223f565b5f6107dd565b60405163029a949d60e31b8152600490fd5b82346101e15760203660031901126101e15780610821612120565b6108296125d3565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190823b156108a4576024849283604051958694859363ca5eb5e160e01b85521660048401525af18015610899576108895750f35b6108929061223f565b6101e15780f35b6040513d84823e3d90fd5b505050fd5b8260031991608083360112610b9157600435926001600160401b038411610ced5783360301126101e15760403660231901126101e1576064356001600160a01b03811690036101dd576108fa61256b565b505f602060405161090a81612210565b8281520152606482013591610921816004016123c8565b506109597f00000000000000000000000000000000000000000000000000000000000000006109548160448501356128d3565b6128f1565b92808410610ccf575061098e8330337f000000000000000000000000000000000000000000000000000000000000000061298d565b61099b8382600401612616565b6109aa836004969396016123c8565b906040516109b781612210565b602435815260443560208201526109cc61256b565b50805191823403610cb757602082015180610ba8575b5090839291610a459860206109f860809761259d565b93015115159263ffffffff60405196610a1088612252565b1686526020860152604085015260608401528383015260405180809881946302637a4560e41b835260643590600484016127d7565b03917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1928315610b9c578093610b24575b5060c0935060405190610a9382612210565b8082526020820192818452610aac8551916004016123c8565b9163ffffffff6040519316835280602084015260408301527f85496b760a4b7f8d66384b9df21b381f5d1b1e79f229a47aaf4c232edc2fe59a60603393a360206040805194805186526001600160401b03838201511683870152015180516040860152015160608401525160808301525160a0820152f35b90925060803d608011610b95575b610b3c81866122be565b840193608081860312610b915760405191610b568361226d565b815183526020820151906001600160401b03821682036101e15750602083015260c094610b85916040016127af565b60408201529184610a81565b5080fd5b503d610b32565b604051903d90823e3d90fd5b60405163393f876560e21b81529094939291906020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610cac578991610c66575b506001600160a01b0316988915610c5457610a4599608096610c49917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690339061298d565b9850909192936109e2565b6040516329b99a9560e11b8152600490fd5b90506020813d602011610ca4575b81610c81602093836122be565b81010312610ca057516001600160a01b0381168103610ca0578a610bfb565b8880fd5b3d9150610c74565b6040513d8b823e3d90fd5b6040516304fb820960e51b8152346004820152602490fd5b83604491604051916371c4efed60e01b835260048301526024820152fd5b8280fd5b82602090600319928284360112610b91576001600160401b0393600435858111610f6457610d23903690600401612381565b9290845b848110610e0257604051638e9e709960e01b815288908890888082600481335afa938415610df5578194610d7f575b505050610d7b604051928392638351eea760e01b8452600484015260248301906120ce565b0390fd5b90919293503d8083853e610d9381856122be565b8301928481850312610ced578051918211610ced570182601f82011215610b9157805191610dc0836123d9565b93610dce60405195866122be565b8385528584840101116101e1575090610dec918480850191016120ad565b90828080610d56565b50604051903d90823e3d90fd5b8060051b82013561013e1983360301811215610f60578201610e23816123c8565b90610e4389820135809363ffffffff165f52600160205260405f20541490565b15610f5657610e5661010082018261242a565b868301356001600160a01b038116929190839003610f5257610e7c61012085018561242a565b929091303b15610f4e57604051633411683760e21b8152968f9063ffffffff610ea4896121b6565b1660048a015260248901526040870135908116809103610f4a5787958e979587958e610ef28f97899760c099610f069860448b015260a08d013560648b015260848a015260e4890191612470565b9360a48701528584030160c4860152612470565b03920135305af18015610f3f57908791610f27575b50506001905b01610d27565b610f309061223f565b610f3b578589610f1b565b8580fd5b6040513d89823e3d90fd5b8d80fd5b8c80fd5b8a80fd5b5050600190610f21565b8680fd5b8380fd5b82346101e15760603660031901126101e157610f826121a3565b610f8a6121c7565b91604435906001600160401b0382116101e157610fce610fba8585610fb236600488016120f3565b929091612490565b6040519182916020835260208301906120ce565b0390f35b82346101e15760203660031901126101e157604060209163ffffffff610ff66121a3565b168152600183522054604051908152f35b82346101e157602080600319360112610b91576001600160401b03600435818111610f64579161103c84933690600401612381565b9290916110476125d3565b845b84811061113e5750604051938082860183875252604085019160408260051b87010194809488915b8483106110a257897fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b6748a8a038ba180f35b90919293949596603f198982030187528735605e1983360301811215610f5257820160609063ffffffff6110d5826121b6565b1683528681013561ffff81168091036101dd57878401526040810135601e1982360301811215610f4e570190868235920192858311610f4e578236038413610f4e57600193889383838695604061112f9601520191612470565b99019701959493019190611071565b949361116361115d6111538884889698612874565b604081019061242a565b90612896565b611171611153878385612874565b63ffffffff61118c6111878a86889c969c612874565b6123c8565b1687526003865260408720866111a3848688612874565b013561ffff8116809103610ca0575f52865260405f20908581116112c1576111cb82546121d8565b601f90818111611281575b508890821160011461121d578190899a6001969798999a92611212575b50505f19600383901b1c191690841b1790555b01939093929192611049565b013590508a806111f3565b601f19821699838a52888a20918a5b8c811061126a57508360019798999a9b9c10611251575b505050831b83019055611206565b01355f19600384901b60f8161c19169055898080611243565b90928a60018192868601358155019401910161122c565b838a52888a208280850160051c8201928b86106112b8575b0160051c01905b8181106112ad57506111d6565b8a81556001016112a0565b92508192611299565b634e487b7160e01b88526041600452602488fd5b82346101e157806003193601126101e1576002546040516001600160a01b039091168152602090f35b82346101e157602080600319360112610b91576004356001600160401b038111610ced5761133183913690600401612381565b60405161133d81612288565b8381528481019061134d836123b1565b9361135b60405195866122be565b838552611367846123b1565b601f1901865b818110611463575050855b8481106113de5787878760405191838301848452825180915260408401948060408360051b870101940192955b8287106113b25785850386f35b9091929382806113ce600193603f198a820301865288516120ce565b96019201960195929190926113a5565b8061144488808b6114246114306113ff9d9e9d60019860051b8a018a61242a565b8b8d60409693965195838794868601998a37840191858301938a8552519384916120ad565b010380845201826122be565b5190305af461143d612845565b903061292a565b61144e828961245c565b52611459818861245c565b5001969596611378565b60608782018a0152880161136d565b82346101e157806003193601126101e157602060405160018152f35b82346101e157806003193601126101e15760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b82346101e157806003193601126101e157546040516001600160a01b039091168152602090f35b82346101e157806003193601126101e157602060405160068152f35b82346101e157366003190160a08112610b91576060136101e1576064356001600160401b038111610b91576115459036906004016120f3565b50506084356001600160a01b038116908190036101dd576020906040519030148152f35b82346101e15760403660031901126101e1576020906115866121a3565b50604051908152f35b82346101e157806003193601126101e1576115a86125d3565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b82346101e15760203660031901126101e1577ff0be4f1e87349231d80c36b33f9e8639658eeaf474014dee15a3e6a4d44141976020611625612120565b61162d6125d3565b600480546001600160a01b0319166001600160a01b03929092169182179055604051908152a180f35b82346101e157806003193601126101e1576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b82346101e15760403660031901126101e15760206116d46116ba6121a3565b6024359063ffffffff165f52600160205260405f20541490565b6040519015158152f35b82346101e15760403660031901126101e15761ffff60406116fd6121a3565b9263ffffffff61170b6121c7565b9416815260036020522091165f52602052610fce610fba60405f206122df565b82346101e157806003193601126101e1576020604051308152f35b905034610b915760031990604036830112610ced57600435906001600160401b038211610f645781600401928236030112610ced5760243590811515809203610f64575f602060405161179881612210565b82815201526117e060446109546064840135936117b4876123c8565b507f000000000000000000000000000000000000000000000000000000000000000092839101356128d3565b908082106118f35750916040916118056117fd6118649584612616565b9190936123c8565b925f6020865161181481612210565b82815201526118228461259d565b63ffffffff86519561183387612252565b16855260208501528484015260608301526080820152815180938192631bb8518b60e31b83523090600484016127d7565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156108995782916118b5575b60408260208251918051835201516020820152f35b905060403d6040116118ec575b6118cc81836122be565b8101916040828403126101e157506040916118e6916127af565b5f6118a0565b503d6118c2565b60449250604051916371c4efed60e01b835260048301526024820152fd5b82346101e15760403660031901126101e1577f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b61194c6121a3565b602435906119586125d3565b63ffffffff16808452600160209081526040808620849055805192835290820192909252a180f35b82346101dd5760c03660031901126101dd5761199a612120565b6064359060ff82168092036101dd576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116803b156101dd575f928360e492604051968795869463d505accf60e01b865216600485015230602485015260243560448501526044356064850152608484015260843560a484015260a43560c48401525af1801561051d57611a34575080f35b611a3e915061223f565b005b346101dd575f3660031901126101dd57602060405160018152f35b346101dd575f3660031901126101dd57604080516001815260026020820152f35b346101dd575f3660031901126101dd576040805162b9270b60e21b815260016020820152f35b346101dd575f3660031901126101dd57602060405160028152f35b611ac636612136565b949592946001600160a01b0394937f00000000000000000000000000000000000000000000000000000000000000008616935091338403611f0f57611b12611b0d846123c8565b61259d565b986020998a850135809103611ede575082159485611d11575050835f9461056d5781359060ff60f81b82169160f81c80600310908115611cfb575b5061055157600486101561058157858996611bbc575b5050505050611b71906123c8565b95116101dd57611bb7611b956103af5f80516020612a418339815191529584612918565b604051938493351696836020909392919363ffffffff60408201951681520152565b0390a3005b9395929360018103611cca5750505050826021116101dd576001810135928584168094036101dd57806041116101dd5781018860401983830301126101dd5760418201356001600160401b0381116101dd57820190806060830112156101dd578160616041611c2e94013591016123f4565b92857f000000000000000000000000000000000000000000000000000000000000000016803b156101dd575f9283602193611c996040519889968795869463fd40baaf60e01b86523060048701526024860152013560448401526080606484015260848301906120ce565b03925af190811561051d578592611b7192611cbb575b505b9088808080611b63565b611cc49061223f565b88611caf565b6002919396508092945003611ce6575b505050611b7190611cb1565b60039192939450036105515780869392611cda565b915095505f90600481101561058157958c611b4d565b9450959150508588929498116101dd5787351696611d2f8682612918565b611d646001600160401b0391827f000000000000000000000000000000000000000000000000000000000000000091166128f1565b95611d6e866123c8565b50611d9a60405163a9059cbb60e01b868201528b602482015288604482015260448152610659816122a3565b60288811611de1575b50505050505f80516020612a418339815191529250611dc1906123c8565b6040805163ffffffff909216825260208201929092529081908101611bb7565b604086013591821682036101dd57611df8866123c8565b97806028116101dd57611e5e94611e1e61074392604c96602836926027190191016123f4565b926040519a8b956001600160401b0360c01b9060c01b168387015263ffffffff60e01b911b16602885015288602c850152825192839186860191016120ad565b803b156101dd57611ea35f94918592604051968780948193633e5ac80960e11b83528c60048401528b60248401528360448401526080606484015260848301906120ce565b03925af190811561051d575f80516020612a4183398151915293611dc192611ecf575b81928180611da3565b611ed89061223f565b86611ec6565b611ee7856123c8565b60405163309afaf360e21b815263ffffffff9190911660048201526024810191909152604490fd5b6040516391ac5e4f60e01b8152336004820152602490fd5b346101dd575f3660031901126101dd576004546040516001600160a01b039091168152602090f35b346101dd576020916003199183833601126101dd57600435916001600160401b03938484116101dd5783360301126101dd578381611f8d5f93612210565b82815201525f83604051611fa081612210565b828152015260405190611fb282612210565b5f825283820192835260405191611fc883612288565b5f8352611fe560446109546064850135946117b4816004016123c8565b9180831061208f57509360405194611ffc86612210565b8286528186019283526040519460a0860191518652518286015260a06040860152835180915260c08501918060c08360051b8801019501925f905b83821061205257885160608901528551608089015287870388f35b9091929395838061208060019360bf198c82030186526040838c5180518452015191818582015201906120ce565b98019201920190939291612037565b82604491604051916371c4efed60e01b835260048301526024820152fd5b5f5b8381106120be5750505f910152565b81810151838201526020016120af565b906020916120e7815180928185528580860191016120ad565b601f01601f1916010190565b9181601f840112156101dd578235916001600160401b0383116101dd57602083818601950101116101dd57565b600435906001600160a01b03821682036101dd57565b600319810160e081126101dd576060136101dd57600491606435916001600160401b03906084358281116101dd5781612171916004016120f3565b9093909260a4356001600160a01b03811681036101dd579260c4359182116101dd5761219f916004016120f3565b9091565b6004359063ffffffff821682036101dd57565b359063ffffffff821682036101dd57565b6024359061ffff821682036101dd57565b90600182811c92168015612206575b60208310146121f257565b634e487b7160e01b5f52602260045260245ffd5b91607f16916121e7565b604081019081106001600160401b0382111761222b57604052565b634e487b7160e01b5f52604160045260245ffd5b6001600160401b03811161222b57604052565b60a081019081106001600160401b0382111761222b57604052565b606081019081106001600160401b0382111761222b57604052565b602081019081106001600160401b0382111761222b57604052565b608081019081106001600160401b0382111761222b57604052565b90601f801991011681019081106001600160401b0382111761222b57604052565b9060405191825f82546122f1816121d8565b908184526020946001916001811690815f1461235f5750600114612321575b50505061231f925003836122be565b565b5f90815285812095935091905b81831061234757505061231f93508201015f8080612310565b8554888401850152948501948794509183019161232e565b9250505061231f94925060ff191682840152151560051b8201015f8080612310565b9181601f840112156101dd578235916001600160401b0383116101dd576020808501948460051b0101116101dd57565b6001600160401b03811161222b5760051b60200190565b3563ffffffff811681036101dd5790565b6001600160401b03811161222b57601f01601f191660200190565b929192612400826123d9565b9161240e60405193846122be565b8294818452818301116101dd578281602093845f960137010152565b903590601e19813603018212156101dd57018035906001600160401b0382116101dd576020019181360383136101dd57565b805182101561056d5760209160051b010190565b908060209392818452848401375f828201840152601f01601f1916010190565b63ffffffff9094919394165f526020926003845261ffff60405f2091165f5283526124bd60405f206122df565b80511561255d5784156125565760028510156124f8575050610d7b90604051938493639a6d49cd60e01b855260048501526024840191612470565b91926125078585969396612896565b816002116101dd5761255392601e9260011992604051968361253289955180928580890191016120ad565b8401916002868501920190830137015f8482015203908101845201826122be565b90565b9350915050565b5092612553925036916123f4565b604051906125788261226d565b815f81525f6020820152604080519161259083612210565b5f83525f60208401520152565b63ffffffff16805f52600160205260405f20549081156125bb575090565b6024906040519063f6ff4fb760e01b82526004820152fd5b5f546001600160a01b031633036125e657565b60405163118cdaa760e01b8152336004820152602490fd5b908160209103126101dd575180151581036101dd5790565b909160206126e261264c82850135957f0000000000000000000000000000000000000000000000000000000000000000906128d3565b61266361265c60a087018761242a565b36916123f4565b805115801597919061277d576126bd91606891604051948592888401526001600160401b0360c01b9060c01b1660408301523360488301526126ad815180928986860191016120ad565b81010360488101845201826122be565b935b84955f14612775576002905b610fb26126d7826123c8565b91608081019061242a565b6004549093906001600160a01b0316806126fb57505050565b612728839161273a9360405180958194829363043a78eb60e01b84526040600485015260448401906120ce565b8281036003190160248401528a6120ce565b03915afa801561051d5761274c575050565b8161276b92903d1061276e575b61276381836122be565b8101906125fe565b50565b503d612759565b6001906126cb565b509060405191848301526001600160401b0360c01b9060c01b166040820152602881526127a98161226d565b936126bf565b91908260409103126101dd576040516127c781612210565b6020808294805184520151910152565b906020909392936040835263ffffffff8151166040840152818101516060840152608061282b612815604084015160a08488015260e08701906120ce565b6060840151868203603f190160a08801526120ce565b910151151560c08401526001600160a01b03909416910152565b3d1561286f573d90612856826123d9565b9161286460405193846122be565b82523d5f602084013e565b606090565b919081101561056d5760051b81013590605e19813603018212156101dd570190565b90806002116101dd576003823560f01c036128af575050565b610d7b604051928392639a6d49cd60e01b8452602060048501526024840191612470565b81156128dd570490565b634e487b7160e01b5f52601260045260245ffd5b8181029291811591840414171561290457565b634e487b7160e01b5f52601160045260245ffd5b906028116101dd576020013560c01c90565b90612951575080511561293f57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580612984575b612962575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561295a565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815261231f916129cf82612252565b5f806129f79260018060a01b03169360208151910182865af16129f0612845565b908361292a565b8051908115159182612a25575b5050612a0d5750565b60249060405190635274afe760e01b82526004820152fd5b612a3892506020809183010191016125fe565b155f80612a0456feefed6d3500546b29533b128a29e3a94d70788727f0507505ac12eaf2e578fd9ca26469706673582212206875ba61ff8d41e5d3c0f000fc71f5d742d993382def0fea53a2542dd60c461264736f6c63430008180033a2646970667358221220ee9c166d964c760e929a813d7bac6ef28e9e636cfe5eeda587c3c5abea5b788264736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "details": "This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.",
        "params": {
          "origin": "The origin information containing the source endpoint and sender address."
        },
        "returns": {
          "_0": "Whether the path has been initialized."
        }
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "details": "_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.",
        "params": {
          "_sender": "The sender address."
        },
        "returns": {
          "_0": "isSender Is a valid sender."
        }
      },
      "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.",
        "params": {
          "_executor": "The address of the executor for the received message.",
          "_extraData": "Additional arbitrary data provided by the corresponding executor.",
          "_guid": "The unique identifier for the received LayerZero message.",
          "_message": "The payload of the received message.",
          "_origin": "The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."
        }
      },
      "nextNonce(uint32,bytes32)": {
        "details": "_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.",
        "returns": {
          "nonce": "The next nonce."
        }
      },
      "oAppVersion()": {
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol implementation.",
          "senderVersion": "The version of the OAppSender.sol implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setPeer(uint32,bytes32)": {
        "details": "Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.",
        "params": {
          "_eid": "The endpoint ID.",
          "_peer": "The address of the peer to be associated with the corresponding endpoint."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "OFTAdapterCreated(address,address)": {
        "notice": "TODO: docs"
      }
    },
    "kind": "user",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "notice": "Checks if the path initialization is allowed based on the provided origin."
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "notice": "Indicates whether an address is an approved composeMsg sender to the Endpoint."
      },
      "nextNonce(uint32,bytes32)": {
        "notice": "Retrieves the next nonce for a given source endpoint and sender address."
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setPeer(uint32,bytes32)": {
        "notice": "Sets the peer address (OApp instance) for a corresponding endpoint."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5536,
        "contract": "contracts/JasmineHubBridge.sol:JasmineHubBridge",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 727,
        "contract": "contracts/JasmineHubBridge.sol:JasmineHubBridge",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 11569,
        "contract": "contracts/JasmineHubBridge.sol:JasmineHubBridge",
        "label": "adapters",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}